{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./server/app/routes.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/font-configuration/font-configuration.component.ts","./src/app/components/font-configuration/font-configuration.component.html","./src/app/components/font-test/font-test.component.ts","./src/app/components/font-test/font-test.component.html","./src/app/components/server-test/server-test.component.ts","./src/app/components/server-test/server-test.component.html","./src/app/components/shared/checkbox/checkbox.component.ts","./src/app/components/shared/checkbox/checkbox.component.html","./src/app/models/ui-font.model.ts","./src/app/services/api/font/font.service.ts","./src/app/services/external/google/google-fonts-api.service.ts","./src/app/services/font-manager/font-manager.service.ts","./src/app/services/head-uri-loader/head-uri-loader.service.ts","./src/app/services/logger/logger.service.ts","./src/app/services/server-test/server-test.service.ts","./src/app/shared/components/animated-checkmark-svg/animated-checkmark-svg.component.ts","./src/app/shared/components/animated-checkmark-svg/animated-checkmark-svg.component.html","./src/app/shared/components/animated-cube/animated-cube.component.ts","./src/app/shared/components/animated-cube/animated-cube.component.html","./src/app/shared/components/form-controls/checkbox-svg/checkbox-svg.component.ts","./src/app/shared/components/form-controls/checkbox-svg/checkbox-svg.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA,sCAAsC;AAE/B,MAAM,MAAM,GAAG;IACpB,GAAG,EAAE;QACH,KAAK,EAAE,MAAM;QACb,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,YAAY;QAClB,KAAK,EAAE,QAAQ;KAChB;IACD,KAAK,EAAE;QACL,IAAI,EAAE,IAAI;KACX;CACF;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAA;AAAyC;AACc;;;AAGvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAEwC;;;;;;;;;AAOnF,MAAM,YAAY;IAGvB,YAAoB,aAAmC;QAAnC,kBAAa,GAAb,aAAa,CAAsB;QAFvD,UAAK,GAAG,UAAU,CAAC;IAGlB,CAAC;IAEF,QAAQ;QACN,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;IACrC,CAAC;;wEARU,YAAY;4FAAZ,YAAY;QCTzB,oEACA;QAAA,oEAEA;QAAA,2EAA+B;QAC/B,6EAAmC;QAEnC,2EAA+B;QAE/B,+EAAuC;QAEvC,wFAAyD;QAYzD,oFAAiD;;6FDbpC,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AERD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACe;AACX;AAEW;AACT;AACsC;AACN;AACK;AACc;AAC0B;AACf;AACH;;AAsBnG,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YANJ;YACP,uEAAa;YACb,oEAAgB;YAChB,qEAAgB;YAChB,0DAAW;SACZ;mIAIU,SAAS,mBAlBlB,2DAAY;QACZ,iGAAmB;QACnB,2FAAiB;QACjB,gGAAiB;QACjB,8GAAqB;QACrB,yIAA6B;QAC7B,0HAAoB;QACpB,uHAA0B,aAG1B,uEAAa;QACb,oEAAgB;QAChB,qEAAgB;QAChB,0DAAW;6FAKF,SAAS;cApBrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,iGAAmB;oBACnB,2FAAiB;oBACjB,gGAAiB;oBACjB,8GAAqB;oBACrB,yIAA6B;oBAC7B,0HAAoB;oBACpB,uHAA0B;iBAC3B;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,qEAAgB;oBAChB,0DAAW;iBACZ;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AClCD;AAAA;AAAA;AAAA;AAAkD;AACoC;;;AAO/E,MAAM,0BAA0B;IAErC,YAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;IAAI,CAAC;IAE/D,QAAQ;QACN,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IACjC,CAAC;;oGANU,0BAA0B;0GAA1B,0BAA0B;QCRvC,qEAAI;QAAA,6EAAkB;QAAA,4DAAK;;6FDQd,0BAA0B;cALtC,uDAAS;eAAC;gBACT,QAAQ,EAAE,wBAAwB;gBAClC,WAAW,EAAE,qCAAqC;gBAClD,SAAS,EAAE,CAAC,qCAAqC,CAAC;aACnD;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAMd;AAGkC;AAC0B;AAG1D;;;;;;;;ICU9B,6EAGE;IAAA,uDACF;IAAA,4DAAS;;;IAHP,4EAAgB;IAEhB,0DACF;IADE,0FACF;;;IAGA,6EAGE;IAAA,uDACF;IAAA,4DAAS;;;IAHP,4EAAgB;IAEhB,0DACF;IADE,0FACF;;;IAoBF,6EAGE;IAAA,uDACF;IAAA,4DAAS;;;IAHP,4EAAgB;IAEhB,0DACF;IADE,0FACF;;AD3CN,IAAK,YAGJ;AAHD,WAAK,YAAY;IACf,mDAAQ;IACR,+CAAM;AACR,CAAC,EAHI,YAAY,KAAZ,YAAY,QAGhB;AAOM,MAAM,iBAAiB;IAyB5B,iCAAiC;IAEjC,YAAoB,WAA2B,EAAU,eAAsC;QAA3E,gBAAW,GAAX,WAAW,CAAgB;QAAU,oBAAe,GAAf,eAAe,CAAuB;QAzB/F,+BAA+B;QACf,gBAAW,GAAa,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,2DAAK,CAAC,CAAC;QAEjE,yCAAyC;QACzB,iBAAY,GAAG,YAAY,CAAC;QAC5C,WAAW;QACJ,gBAAW,GAAW,EAAE,CAAC;QACzB,cAAS,GAAW,EAAE,CAAC,CAAC,gCAAgC;QAC/D,WAAW;QACJ,eAAU,GAAW,iEAAW,CAAC,CAAC,CAAC,CAAC;QACpC,aAAQ,GAAW,IAAI,CAAC,WAAW,CAAC,IAAI,CAC7C,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,cAAc,CACzC,CAAC;QAKK,WAAM,GAAG,iEAAW,CAAC;QACrB,WAAM,GAAG,+DAAS,CAAC;QAgF1B;;;WAGG;QACH,mCAAmC;QACnC,2EAA2E;QAC3E,IAAI;QAEJ,kDAAkD;QAClD,qDAAqD;QACrD,4CAA4C;QAC5C,yCAAyC;QACzC,iGAAiG;QACjG,iDAAiD;QACjD,GAAG;QAEK,kBAAa,GAAY,KAAK,CAAC;IAzF2D,CAAC;IAEnG,QAAQ;QACN,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAEtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;QAE9C,sCAAsC;QACtC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,YAAY,CAAC;aACzC,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC;aACb,SAAS,CAAC,CAAC,CAAC,EAAE;YACb,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;YACxB,gCAAgC;YAChC,kEAAkE;YAClE,4CAA4C;YAC5C,IAAI;QACN,CAAC,CAAC,CAAC;QAEL,6CAA6C;QAC7C,mBAAmB;QACnB,0BAA0B;QAC1B,mCAAmC;QACnC,gCAAgC;QAChC,sEAAsE;QACtE,QAAQ;QACR,QAAQ;QAER,6CAA6C;QAC7C,mBAAmB;QACnB,0BAA0B;QAC1B,mCAAmC;QACnC,gCAAgC;QAChC,sEAAsE;QACtE,QAAQ;QACR,QAAQ;QACR,+CAA+C;QAC/C,mBAAmB;QACnB,0BAA0B;QAC1B,mCAAmC;QACnC,gCAAgC;QAChC,sEAAsE;QACtE,QAAQ;QACR,QAAQ;IACV,CAAC;IAED;;;;;OAKG;IACI,aAAa,CAAC,SAAuB,EAAE,OAAgB;QAC5D,IAAI,OAAO,EAAE;YACX,QAAQ,SAAS,EAAE;gBACjB,KAAK,YAAY,CAAC,MAAM;oBACtB,+DAA+D;oBAC/D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CACtC,IAAI,CAAC,WAAW,EAChB,OAAO,CAAC,MAAM,CACf,CAAC;oBACF,MAAM;gBACR,KAAK,YAAY,CAAC,IAAI;oBACpB,2DAA2D;oBAC3D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CACpC,IAAI,CAAC,SAAS,EACd,OAAO,CAAC,MAAM,CACf,CAAC;oBACF,MAAM;aACT;SACF;IACH,CAAC;IAoBD,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,IAAI,YAAY,CAAC,MAAM;QACrB,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;YAC5B,MAAM;gBACJ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,GAAG,GAAG,CAAC;gBACzC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;YAC5C,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,GAAG,MAAM,CAAC;YAEvC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CACpC,IAAI,CAAC,SAAS,EACd,SAAS,EACT,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAChC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,gBAAgB,CACtB,WAAmB,EACnB,UAAmB,EACnB,UAAmB;QAEnB,MAAM,QAAQ,GAAG;YACf,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC;YACnE,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC;SACpE,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC;;kFAxJU,iBAAiB;iGAAjB,iBAAiB;QCvB9B,wEAA4B;QAAA,mFAAwB;QAAA,4DAAK;QACzD,wEAA4B;QAAA,8GAAmD;QAAA,4DAAK;QACpF,wEAA4B;QAAA,8GAAmD;QAAA,4DAAK;QACpF,wEAA4B;QAAA,qFAA0B;QAAA,4DAAK;QAC3D,wEAA4B;QAAA,qFAA0B;QAAA,4DAAK;QAC3D,yEAA4B;QAAA,0GAAuD;QAAA,4DAAK;QACxF,iEACA;QAAA,wEAAyB;QAAA,yGAA6C;QAAA,4DAAI;QAC1E,wEAAyB;QAAA,+GAAmD;QAAA,4DAAI;QAChF,wEAAyB;QAAA,+GAAmD;QAAA,4DAAI;QAChF,wEAAyB;QAAA,sFAA0B;QAAA,4DAAI;QACvD,wEAAyB;QAAA,sFAA0B;QAAA,4DAAI;QACvD,wEAAyB;QAAA,0GAAuD;QAAA,4DAAI;QACpF,iEACA;QAAA,0EACE;QAAA,uEACE;QAAA,6EAIE;QAFA,gKAAiB,kDAA0C,IAAC;QAE5D,+EACE;QAAA,qHAGE;;QAEJ,4DAAW;QACX,+EACE;QAAA,qHAGE;QAEJ,4DAAW;QACb,4DAAS;QACT,iEACA;QAAA,4EAAwB;QAAA,kEAAM;QAAA,4DAAQ;QACtC,4EAMA;QAJE,0MAAwC,mJACiB,GAAG,sCAAkC,GAAG,IADzD;QAF1C,4DAMA;QAAA,qEAAG;QAAA,0EAAc;QAAA,iEAAI;QAAA,wDAAqB;QAAA,4DAAI;QAC9C,qEAAG;QAAA,wDAAoC;QAAA,iEAAI;QAAA,wDAAwC;QAAA,4DAAI;QACzF,4DAAM;QAEN,uEACE;QAAA,6EAIE;QAFA,gKAAiB,gDAAwC,IAAC;QAE1D,qHAGE;QAEJ,4DAAS;QACT,iEACA;QAAA,qEAAG;QAAA,0EAAc;QAAA,iEAAI;QAAA,wDAAmB;QAAA,4DAAI;QAC5C,qEAAG;QAAA,wDACH;QAAA,iEAAI;QAAA,wDAAsC;QAAA,4DAAI;QAChD,4DAAM;QAGN,uEACE;QAAA,+EAGY;QADV,yMAA+B;QAChC,4DAAW;QACZ,qEAAG;QAAA,wDAAwC;QAAA,4DAAI;QAC/C,qEAAG;QAAA,wDAA4C;QAAA,4DAAI;QACrD,4DAAM;QAeN,uEACE;QAAA,sEAAI;QAAA,0EAAc;QAAA,4DAAK;QACvB,4EAA2B;QAAA,oEAAQ;QAAA,4DAAQ;QAC3C,iFAOA;QAJE,6LAA2B;QAH7B,4DAOA;QAAA,qEAAG;QAAA,wDAA0B;QAAA,4DAAI;QACjC,qEAAG;QAAA,wDAAgC;QAAA,4DAAI;QACvC,6EAAyB;QAAA,kEAAM;QAAA,4DAAQ;QACvC,iFAKA;QAHE,6LAA2B;QAF7B,4DAKA;QAAA,qEAAG;QAAA,wDAA0B;QAAA,4DAAI;QACjC,qEAAG;QAAA,wDAA8B;QAAA,4DAAI;QACvC,4DAAM;QACR,4DAAM;QAGN,0EACE;QAAA,uEACE;QAAA,wEAIA;QAAA,6EAAwB;QAAA,wEAAM;QAAA,2EAAe;QAAA,4DAAO;QAAA,4DAAQ;QAC5D,iEAAI;QAAA,iEACJ;QAAA,wEAIA;QAAA,6EAAwB;QAAA,wEAAM;QAAA,2EAAe;QAAA,4DAAO;QAAA,4DAAQ;QAC9D,4DAAM;QACR,4DAAM;;;;QA7HF,oFAAuB;QACvB,0DAAuB;QAAvB,oFAAuB;QACvB,0DAAuB;QAAvB,oFAAuB;QACvB,0DAAuB;QAAvB,oFAAuB;QACvB,0DAAuB;QAAvB,oFAAuB;QACvB,0DAAuB;QAAvB,oFAAuB;QAExB,0DAAqB;QAArB,kFAAqB;QACrB,0DAAqB;QAArB,kFAAqB;QACrB,0DAAqB;QAArB,kFAAqB;QACrB,0DAAqB;QAArB,kFAAqB;QACrB,0DAAqB;QAArB,kFAAqB;QACrB,0DAAqB;QAArB,kFAAqB;QAKlB,0DAAsB;QAAtB,mFAAsB;QAIZ,0DAAsC;QAAtC,qJAAsC;QAOtC,0DAA2B;QAA3B,+EAA2B;QAWrC,0DAAwC;QAAxC,mGAAwC;QAIrB,0DAAqB;QAArB,sFAAqB;QACvC,0DAAoC;QAApC,8GAAoC;QAAI,0DAAwC;QAAxC,kHAAwC;QAKjF,0DAAoB;QAApB,iFAAoB;QAGZ,0DAAgC;QAAhC,oFAAgC;QAOrB,0DAAmB;QAAnB,oFAAmB;QACrC,0DACH;QADG,6GACH;QAAI,0DAAsC;QAAtC,gHAAsC;QAOxC,0DAA+B;QAA/B,0FAA+B;QAE9B,0DAAwC;QAAxC,kHAAwC;QACxC,0DAA4C;QAA5C,sHAA4C;QAsB7C,0DAA2B;QAA3B,sFAA2B;QAI1B,0DAA0B;QAA1B,kGAA0B;QAC1B,0DAAgC;QAAhC,0FAAgC;QAIjC,0DAA2B;QAA3B,sFAA2B;QAG1B,0DAA0B;QAA1B,kGAA0B;QAC1B,0DAA8B;QAA9B,0FAA8B;;6FDnFxB,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,4BAA4B,CAAC;aAC1C;;;;;;;;;;;;;;AExBD;AAAA;AAAA;AAAA;AAAA;AAA6D;AAEsB;;;;;ICInF,uEAGE;IAAA,uDACF;IAAA,4DAAI;;;IADF,0DACF;IADE,iIACF;;ADHA,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AAOf,MAAM,mBAAmB;IAI9B,YAAmB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;IACvD,CAAC;IAED,QAAQ;QACN,qEAAqE;IACvE,CAAC;IACD,WAAW;IACX,CAAC;IAED,SAAS;QACP,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,CAAC;QACnE,8CAA8C;IAChD,CAAC;;sFAjBU,mBAAmB;mGAAnB,mBAAmB;QCdhC,gEACA;QAAA,gEACA;QAAA,qEAAI;QAAA,sEAAW;QAAA,4DAAK;QAEpB,4EAA8B;QAAtB,2IAAS,eAAW,IAAC;QAAC,sEAAW;QAAA,4DAAS;QAElD,2GAGE;;;QAHC,0DAA4C;QAA5C,yJAA4C;;6FDQlC,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;;;;;;;;;;;;;AEbD;AAAA;AAAA;AAAA;AAA8J;;;AAUvJ,MAAM,iBAAiB;IAuB5B,YAAoB,QAAmB,EAAU,UAAsB,EAAU,GAAsB;QAAnF,aAAQ,GAAR,QAAQ,CAAW;QAAU,eAAU,GAAV,UAAU,CAAY;QAAU,QAAG,GAAH,GAAG,CAAmB;QArB9F,YAAO,GAAW,EAAE,CAAC;QAEpB,uBAAkB,GAAG,IAAI,0DAAY,EAAW,CAAC;QAiBnD,kBAAa,GAAY,KAAK,CAAC;QAIrC,IAAI,CAAC,SAAS,GAAG,YAAY,GAAG,iBAAiB,CAAC,SAAS,EAAE,CAAC;QAC9D,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;IACpD,CAAC;IAtBD,IAAa,YAAY;QACvB,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IACD,IAAI,YAAY,CAAC,MAAM;QACrB,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,IAAI,CAAC,aAAa,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC;QACxE,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAE5B,wDAAwD;QACxD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACjD,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;IAaD,2BAA2B;IAC3B,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/C,CAAC;IAED,QAAQ,CAAC,MAAa;QACpB,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,MAAM,CAAC,CAAC;QAChD,sCAAsC;IACxC,CAAC;IACD,eAAe,CAAC,SAAS;QACvB,OAAO,CAAC,GAAG,CAAC,uCAAuC,GAAG,SAAS,CAAC,CAAC;IACnE,CAAC;;AAtBM,2BAAS,GAAW,CAAC,CAAC;kFAlBlB,iBAAiB;iGAAjB,iBAAiB;QCV9B,2EAQA;QANE,2LAA0B,wFAGhB,oBAAgB,IAHA,sGAIT,2BAAuB,IAJd;QAF5B,4DAQA;QAAA,2EACE;QAAA,uEAAM;QAAA,uDAAW;QAAA,4DAAO;QAC1B,4DAAQ;;QARN,qFAA0B;QAOpB,0DAAW;QAAX,4EAAW;;6FDCN,iBAAiB;cAN7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;gBACxC,eAAe,EAAE,qEAAuB,CAAC,MAAM;aAChD;;kBAGE,mDAAK;;kBAEL,oDAAM;;kBACN,mDAAK;;;;;;;;;;;;;;AEAR;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,MAAM;IAKjB,YAAY,IAAa;QACvB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;SACzG;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QACtD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC9E,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,GAAc;IACzB,EAAE,MAAM,EAAE,eAAe,EAAE;IAC3B,EAAE,MAAM,EAAE,OAAO,EAAE;IACnB,EAAE,MAAM,EAAE,OAAO,EAAE;IACnB,EAAE,MAAM,EAAE,WAAW,EAAE;IACvB,EAAE,MAAM,EAAE,QAAQ,EAAE;IACpB,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE;IACxC,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,kBAAkB,EAAE,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE,EAAG,MAAM,EAAE,GAAG,EAAE,EAAE;CACxG,CAAC;AAEF,SAAS,aAAa,CAAC,KAAgB;IACrC,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7C,CAAC;AAEM,MAAM,KAAK,GAAa,aAAa,CAAC,OAAO,CAAC,CAAC;AAEtD,MAAM,YAAY,GAAc;IAC9B,EAAE,MAAM,EAAE,eAAe,EAAE;IAC3B,EAAE,MAAM,EAAE,OAAO,EAAE;IACnB,EAAE,MAAM,EAAE,OAAO,EAAE;IACnB,EAAE,MAAM,EAAE,WAAW,EAAE;IACvB,EAAE,MAAM,EAAE,QAAQ,EAAE;CACrB,CAAC;AACF,MAAM,UAAU,GAAc;IAC5B,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE;IACxC,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,kBAAkB,EAAE,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE,EAAG,MAAM,EAAE,GAAG,EAAE,EAAE;CACxG,CAAC;AACK,MAAM,WAAW,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;AAChD,MAAM,SAAS,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;;;;;;;;;;;;;AC9DnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACO;AAGlD,sBAAsB;AACoC;AAEM;AAE3B;;;AAK9B,MAAM,cAAc;IAEzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAElC,SAAS;QAEd,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAC3C,MAAM,OAAO,GAAuB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,yDAAM,CAAC,GAAG,CAAC,KAAK,GAAG,yDAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAE9F,MAAM,WAAW,GACb,OAAO,CAAC,IAAI,CACZ,0DAAG,CAAC,CAAC,SAAiB,EAAE,EAAE;YACxB,OAAO,SAAS,CAAC,GAAG,CAAE,CAAC,IAAU,EAAE,EAAE;gBACnC,MAAM,MAAM,GAAY;oBACtB,MAAM,EAAE,IAAI,CAAC,WAAW;oBACxB,MAAM,EAAE,IAAI,CAAC,OAAO;oBACpB,MAAM,EAAE,IAAI,CAAC,OAAO;iBAErB;gBACD,OAAO,IAAI,4DAAM,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CACL,CAAC;QACF,OAAO,WAAW,CAAC;IACrB,CAAC;IAEM,sBAAsB;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAW,yDAAM,CAAC,GAAG,CAAC,KAAK,GAAG,yDAAM,CAAC,GAAG,CAAC,IAAI,GAAG,kBAAkB,CAAC,CAAC;IAE1F,CAAC;IAED,0DAA0D;IAE1D,IAAI;IAEG,OAAO,CAAC,IAAY;QACzB,OAAO;IACT,CAAC;;4EArCU,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFb,MAAM;6FAEP,cAAc;cAH1B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACbD;AAAA;AAAA;AAAA;AAAA;AAA2C;AACO;AAIE;;;AAK7C,MAAM,qBAAqB;IAahC;;OAEG;IACH,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAdnB,aAAQ,GAAW,iDAAiD,CAAC;QACrE,YAAO,GAAW,8CAA8C,CAAC;QACjE,eAAU,GAAW,QAAQ,CAAC;QAC9B,QAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;QAGtE;;WAEG;QACK,aAAQ,GAAG,IAAI,GAAG,EAAqD,CAAC;IAKxC,CAAC;IAEzC;;;;;OAKG;IACI,SAAS,CAAC,OAA2B,YAAY,EAAE,aAAsB,KAAK;QACnF,4BAA4B;QAE5B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAC5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;OAMG;IACK,mBAAmB,CAAC,OAA2B,EAAE,GAAW,EAAE,aAAsB,KAAK;QAC/F,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,IAAI,UAAU,EAAE;YACzB,2FAA2F;YAC3F,uCAAuC;YACvC,MAAM,GAAG,IAAI,CAAC,IAAI;iBACf,GAAG,CAAyB,GAAG,CAAC;iBAChC,IAAI,CACH,4DAAK,CAAC,OAAO,CAAC;YACd,oGAAoG;YACpG,gDAAgD;YAChD,kEAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAC7B,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACnC,0CAA0C;SAC3C;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;;0FAvDU,qBAAqB;wGAArB,qBAAqB,WAArB,qBAAqB,mBAFpB,MAAM;6FAEP,qBAAqB;cAHjC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACyC;AAE1B;AACwB;AAC5C;AACmB;;;;;;AAKlD,MAAM,kBAAkB;IAiB7B,YACU,qBAA4C,EAC5C,eAA+B,EAC/B,cAAoC,EACpC,MAAqB;QAHrB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,oBAAe,GAAf,eAAe,CAAgB;QAC/B,mBAAc,GAAd,cAAc,CAAsB;QACpC,WAAM,GAAN,MAAM,CAAe;QAnBvB,yBAAoB,GAAgB,IAAI,GAAG,EAAE,CAAC;QAI9C,aAAQ,GAAqB,EAAE,CAAC;QAiBtC,kCAAkC;IACpC,CAAC;IAEM,IAAI;QAET,2BAA2B;QAC3B,qFAAqF;QACrF,kGAAkG;QAElG,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC3C,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,YAAY,CAAC;iBAC/C,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC;iBACb,SAAS,CAAC,KAAK,CAAC,EAAE;gBACjB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,YAAY;gBACZ,0EAA0E;gBAC1E,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC;SACN;IACH,CAAC;IAEO,uBAAuB;QAC7B,sEAAsE;QACtE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC3B,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,uHAAuH;QACvH,+EAA+E;IACjF,CAAC;IAEO,kBAAkB;IAE1B,CAAC;IAEO,mBAAmB;IAE3B,CAAC;;oFAhEU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;6FAEP,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACVD;AAAA;AAAA;AAAA;AAAA;AAAgF;AACrC;AAEQ;;AAK5C,MAAM,oBAAoB;IAS/B,YACE,eAAiC,EACP,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QAT7B,gBAAW,GAAG,2CAA2C,CAAC;QAC1D,sBAAiB,GAAG,UAAU,CAAC;QAC/B,qBAAgB,GAAG,eAAe,CAAC;QASlD,qFAAqF;QACrF,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;IAEM,aAAa;QAClB,iFAAiF;QACjF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,WAAW,IAAI,2DAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAChF,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,gBAAgB,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;QAEnD,uCAAuC;QACvC,MAAM,QAAQ,GAAoB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACtE,QAAQ,CAAC,IAAI,GAAG,UAAU,CAAC;QAC3B,QAAQ,CAAC,GAAG,GAAG,YAAY,CAAC;QAC5B,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;QAC/D,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAEtE,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAEO,YAAY,CAAC,OAA4C;QAC/D,MAAM,IAAI,GAAoB,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAClG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAEM,cAAc,CAAC,IAAc;QAClC,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC;;wFA3CU,oBAAoB,iLAWrB,wDAAQ;uGAXP,oBAAoB,WAApB,oBAAoB,mBAFnB,MAAM;6FAEP,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;gHAYuC,QAAQ;sBAA3C,oDAAM;uBAAC,wDAAQ;;;;;;;;;;;;;;ACnBpB;AAAA;AAAA;AAAA,6BAA6B;AACc;;AAWpC,MAAM,aAAa;;0EAAb,aAAa;gGAAb,aAAa,WAAb,aAAa,mBAFZ,MAAM;6FAEP,aAAa;cAHzB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACXD;AAAA;AAAA;AAAA;AAAA;AAA2C;AACkC;AAK7E,sBAAsB;AACiC;;;AAKhD,MAAM,iBAAiB;IAE5B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAElC,kBAAkB;QAEvB,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAiB,yDAAM,CAAC,GAAG,CAAC,KAAK,GAAG,yDAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC3E,CAAC;;kFARU,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB,mBAFhB,MAAM;6FAEP,iBAAiB;cAH7B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACXD;AAAA;AAAA;AAAA;AAAA;AAAyD;AAEzD,0BAA0B;AACL;;AAGrB,6CAA6C;AAOtC,MAAM,6BAA6B;IAaxC;QAXS,WAAM,GAAW,EAAE,CAAC;QA6CtB,YAAO,GAAY,KAAK,CAAC;QACxB,SAAI,GAAW,EAAE,CAAC;QAClB,UAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACpB,WAAM,GAAG,IAAI,CAAC,OAAO,CAAC;IArCd,CAAC;IAEjB,QAAQ;QACN,8BAA8B;QAC9B,kCAAkC;QAClC,+BAA+B;QAC/B,WAAW;QACX,iBAAiB;QACjB,sBAAsB;QACtB,mBAAmB;QACnB,MAAM;QAEN,gDAAgD;QAChD,kDAAkD;QAClD,kDAAkD;QAClD,WAAW;QACX,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;QAC3D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,gCAAgC,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC;QAE1D,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,GAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI,GAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAE/C,0FAA0F;QAC1F,0FAA0F;QAC1F,yFAAyF;QACzF,4FAA4F;QAE5F,oDAAoD;QAEpD,WAAW;IACb,CAAC;IAOM,OAAO;QACZ,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,mBAAmB,EAAE;SAC3B;aAAM;YACL,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;QACD,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/B,CAAC;IAEO,iBAAiB;QACvB,IAAI,MAAM,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3F,IAAI,KAAK,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACpF,MAAM,EAAE,CAAC;QAET,uDAAuD;QACvD,YAAY;QACZ,qCAAqC;IACvC,CAAC;IACO,mBAAmB;QACzB,IAAI,MAAM,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7F,IAAI,OAAO,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrF,MAAM,EAAE,CAAC;IACX,CAAC;IAEO,GAAG,CAAC,CAAS,EAAE,IAAY,EAAE,QAAmB;QACtD,QAAQ,CAAC;QACT,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SAC5D;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SAClD;IACH,CAAC;;0GAnFU,6BAA6B;6GAA7B,6BAA6B;QCH1C,4EAIE;QAJM,qJAAS,aAAS,IAAC;QAIzB,8DACE;QADF,yEACE;QAAA,oEACE;QAAA,qEACA;QAAA,qEAIF;QAAA,4DAAI;QACN,4DAAM;QAEN,yEAEE;QAAA,oEACE;QAAA,qEACA;QAAA,qEAKF;QAAA,4DAAI;QACN,4DAAM;QAEN,yEAEE;QAAA,wEACE;QAAA,sEAGA;QAAA,sEAKF;QAAA,4DAAI;QACN,4DAAM;QACR,4DAAS;;QAtCP,0EAAa;;6FDEF,6BAA6B;cALzC,uDAAS;eAAC;gBACT,QAAQ,EAAE,4BAA4B;gBACtC,WAAW,EAAE,yCAAyC;gBACtD,SAAS,EAAE,CAAC,yCAAyC,CAAC;aACvD;;kBAGE,mDAAK;;kBACL,mDAAK;;;;;;;;;;;;;;AEhBR;AAAA;AAAA;AAAkD;;AAO3C,MAAM,qBAAqB;IAEhC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;0FALU,qBAAqB;qGAArB,qBAAqB;QCPlC,yEACE;QAAA,yEACE;QAAA,yEAAwB;QAAA,gEAAK;QAAA,4DAAM;QACnC,yEAAwB;QAAA,gEAAK;QAAA,4DAAM;QACnC,yEAAuB;QAAA,+DAAI;QAAA,4DAAM;QACjC,yEAAuB;QAAA,+DAAI;QAAA,4DAAM;QACjC,0EAAsB;QAAA,+DAAG;QAAA,4DAAM;QAC/B,0EAAyB;QAAA,kEAAM;QAAA,4DAAM;QACvC,4DAAM;QACR,4DAAM;;6FDFO,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAyD;;;AAOlD,MAAM,oBAAoB;IAK/B;QAHS,WAAM,GAAW,EAAE,CAAC;QACpB,YAAO,GAAW,EAAE,CAAC;IAEd,CAAC;IAEjB,QAAQ;IACR,CAAC;;wFARU,oBAAoB;oGAApB,oBAAoB;QCPjC,2FAE8B;QAC9B,sEAGA;QAAA,2EAAsB;QAAA,uDAAW;QAAA,4DAAQ;;QALvC,yFAA4B;QAG5B,0DAAa;QAAb,0EAAa;QAER,0DAAc;QAAd,2EAAc;QAAC,0DAAW;QAAX,4EAAW;;6FDCpB,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;kBAGE,mDAAK;;kBACL,mDAAK;;;;;;;;;;;;;;AEVR;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","// SHARED BETWEEN FRONTEND AND BACKEND\r\n\r\nexport const routes = {\r\n  api: {\r\n    _root: '/api',\r\n    font: '/font',\r\n    test: '/test-data',\r\n    other: '/other'\r\n  },\r\n  error: {\r\n    _404: '/*'\r\n  },\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { HeadUriLoaderService } from './services/head-uri-loader/head-uri-loader.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'dive-inn';\r\n  \r\n  constructor(private headUriLoader: HeadUriLoaderService) \r\n  {}\r\n\r\n  ngOnInit(): void {\r\n    this.headUriLoader.loadFontsLink();\r\n  }\r\n}\r\n","<img src='/assets/images/logoLg.png' />\r\n<img src='/assets/images/logoSm.png' />\r\n\r\n<app-font-test></app-font-test>\r\n<app-server-test></app-server-test>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<app-animated-cube></app-animated-cube>\r\n\r\n<app-animated-checkmark-svg></app-animated-checkmark-svg>\r\n\r\n<!-- <app-animated-checkmark-svg\r\n  size=\"100\"\r\n>\r\n</app-animated-checkmark-svg>\r\n\r\n<app-checkbox\r\n  id=\"testCheckbox\"\r\n  uiLabel=\"Test Checkbox\"\r\n></app-checkbox> -->\r\n\r\n<app-font-configuration></app-font-configuration>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ServerTestComponent } from './components/server-test/server-test.component';\r\nimport { FontTestComponent } from './components/font-test/font-test.component';\r\nimport { CheckboxComponent } from './components/shared/checkbox/checkbox.component';\r\nimport { AnimatedCubeComponent } from './shared/components/animated-cube/animated-cube.component';\r\nimport { AnimatedCheckmarkSvgComponent } from './shared/components/animated-checkmark-svg/animated-checkmark-svg.component';\r\nimport { CheckboxSvgComponent } from './shared/components/form-controls/checkbox-svg/checkbox-svg.component';\nimport { FontConfigurationComponent } from './components/font-configuration/font-configuration.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ServerTestComponent,\r\n    FontTestComponent,\r\n    CheckboxComponent,\r\n    AnimatedCubeComponent,\r\n    AnimatedCheckmarkSvgComponent,\r\n    CheckboxSvgComponent,\r\n    FontConfigurationComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FontManagerService } from '../../services/font-manager/font-manager.service';\r\n\r\n@Component({\r\n  selector: 'app-font-configuration',\r\n  templateUrl: './font-configuration.component.html',\r\n  styleUrls: ['./font-configuration.component.scss']\r\n})\r\nexport class FontConfigurationComponent implements OnInit {\r\n\r\n  constructor(private fontManagerService: FontManagerService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.fontManagerService.init();\r\n  }\r\n\r\n}\r\n","<h2>Font Configuration</h2>\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  UiFont,\r\n  fonts,\r\n  headerFonts,\r\n  textFonts,\r\n} from '../../models/ui-font.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CheckboxComponent } from '../shared/checkbox/checkbox.component';\r\nimport { FontApiService } from '../../services/api/font/font.service';\r\nimport { GoogleFontsApiService } from '../../services/external/google/google-fonts-api.service';\r\nimport { Observable } from 'rxjs';\r\nimport { GoogleFontsApiSort, GoogleFontsApi } from '../../services/external/google/google-fonts-api.model';\r\nimport { take } from 'rxjs/operators';\r\n\r\nenum ControlsEnum {\r\n  'header',\r\n  'text',\r\n}\r\n\r\n@Component({\r\n  selector: 'app-font-test',\r\n  templateUrl: './font-test.component.html',\r\n  styleUrls: ['./font-test.component.scss'],\r\n})\r\nexport class FontTestComponent implements OnInit {\r\n\r\n  // fonts available in dropdowns\r\n  public readonly fontOptions: UiFont[] = Object.assign([], fonts);\r\n\r\n  // make enum values available in template\r\n  public readonly controlsEnum = ControlsEnum;\r\n  // ngStyles\r\n  public headerStyle: object = {};\r\n  public textStyle: object = {}; // { 'font-family': 'PT Sans' };\r\n  // ngModels\r\n  public headerFont: UiFont = headerFonts[0];\r\n  public textFont: UiFont = this.fontOptions.find(\r\n    (font) => font.uiText === 'PT Sans Bold'\r\n  );\r\n  // controls for adding new fonts\r\n  public fontNameToAdd: string;\r\n  public fontHrefToAdd: string;\r\n\r\n  public hFonts = headerFonts;\r\n  public tFonts = textFonts;\r\n\r\n  public fontList$: Observable<UiFont[]>;\r\n  public googleFontList: GoogleFontsApi[];\r\n\r\n  // public boldCheckbox : boolean;\r\n\r\n  constructor(private fontService: FontApiService, private fontsApiService: GoogleFontsApiService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.onModelChange(ControlsEnum.header);\r\n    this.onModelChange(ControlsEnum.text);\r\n\r\n    this.fontList$ = this.fontService.getFonts$();\r\n\r\n    //console.time('font-test getFonts$');\r\n    this.fontsApiService.getFonts$('popularity')\r\n      .pipe(take(1))\r\n      .subscribe(f => {\r\n        this.googleFontList = f;\r\n        // for (let i = 0; i < 1; i++) {\r\n        //   console.log(JSON.stringify(this.googleFontList[i], null, 4));\r\n        //   console.timeEnd('font-test getFonts$');\r\n        // }\r\n      });\r\n\r\n    // this.fontsApiService.getFonts$('trending')\r\n    //   .pipe(take(1))\r\n    //   .subscribe(fonts => {\r\n    //     this.googleFontList = fonts;\r\n    //     for (let i=0; i<1; i++) {\r\n    //       console.log(JSON.stringify(this.googleFontList[i], null, 4));\r\n    //     }\r\n    //   });\r\n\r\n    // this.fontsApiService.getFonts$('trending')\r\n    //   .pipe(take(1))\r\n    //   .subscribe(fonts => {\r\n    //     this.googleFontList = fonts;\r\n    //     for (let i=0; i<1; i++) {\r\n    //       console.log(JSON.stringify(this.googleFontList[i], null, 4));\r\n    //     }\r\n    //   });\r\n    // this.fontsApiService.getFonts$('popularity')\r\n    //   .pipe(take(1))\r\n    //   .subscribe(fonts => {\r\n    //     this.googleFontList = fonts;\r\n    //     for (let i=0; i<1; i++) {\r\n    //       console.log(JSON.stringify(this.googleFontList[i], null, 4));\r\n    //     }\r\n    //   });\r\n  }\r\n\r\n  /**\r\n   * Callback for Angular event when dropdown selection is changed and model has updated\r\n   * Set the associated ngStyle object when dropdown changes\r\n   * @param controlId Enum value to distinguish initiating control\r\n   * @param $newVal New font selected\r\n   */\r\n  public onModelChange(controlId: ControlsEnum, $newVal?: UiFont) {\r\n    if ($newVal) {\r\n      switch (controlId) {\r\n        case ControlsEnum.header:\r\n          //this.headerStyle = { 'font-family': this.headerFont.family };\r\n          this.headerStyle = this.buildStyleObject(\r\n            this.headerStyle,\r\n            $newVal.family\r\n          );\r\n          break;\r\n        case ControlsEnum.text:\r\n          //this.textStyle = { 'font-family': this.textFont.family };\r\n          this.textStyle = this.buildStyleObject(\r\n            this.textStyle,\r\n            $newVal.family\r\n          );\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Standard dropdown change event, fires after ngModelChange\r\n   * @param $event DOM event\r\n   */\r\n  // public onChange($event: Event) {\r\n  //   console.log('font-test - customCheckboxChanged DOM event: ' + $event);\r\n  // }\r\n\r\n  // public customCheckboxChanged(newVal: boolean) {\r\n  //   console.log('customCheckboxChanged: ' + newVal);\r\n  //   this.textFont.properties.bold = newVal;\r\n  // [(ngModel)]=\"textFont.properties.bold\"\r\n  // (ngModelChange)=\"$event ? textFont.properties.weight = 700 : textFont.properties.weight = 400\"\r\n  // [checked]=\"textFont.properties.weight === 700\"\r\n  //}\r\n\r\n  private _checkedValue: boolean = false;\r\n\r\n  get checkedValue() {\r\n    return this._checkedValue;\r\n  }\r\n\r\n  set checkedValue(newVal) {\r\n    setTimeout(() => {\r\n      this._checkedValue = newVal;\r\n      newVal\r\n        ? (this.textFont.properties.weight = 700)\r\n        : (this.textFont.properties.weight = 400);\r\n      this.textFont.properties.bold = newVal;\r\n\r\n      this.textStyle = this.buildStyleObject(\r\n        this.textStyle,\r\n        undefined,\r\n        this.textFont.properties.weight\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a style object to pass into ngStyle binding\r\n   * @TODO refactor to pass in any number and type of properties for styles\r\n   */\r\n  private buildStyleObject(\r\n    styleObject: object,\r\n    fontFamily?: string,\r\n    fontWeight?: number\r\n  ): object {\r\n    const newStyle = {\r\n      'font-family': fontFamily ? fontFamily : styleObject['font-family'],\r\n      'font-weight': fontWeight ? fontWeight : styleObject['font-weight'],\r\n    };\r\n    return newStyle;\r\n  }\r\n\r\n}\r\n","<!-- <h1 [ngStyle]=\"{'font-family': 'PT Sans'}\">Dive Inn - What's Inside ? ! @ # $ % * ( ) ~ - + = ' \" ;</h1> -->\r\n\r\n<h1 [ngStyle]=\"headerStyle\">Dive Inn - What's Inside</h1>\r\n<h1 [ngStyle]=\"headerStyle\">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</h1>\r\n<h1 [ngStyle]=\"headerStyle\">a b c d e f g h i j k l m n o p q r s t u v w x y z</h1>\r\n<h1 [ngStyle]=\"headerStyle\">ABCDEFGHIJKLMNOPQRSTUVWXYZ</h1>\r\n<h1 [ngStyle]=\"headerStyle\">abcdefghijklmnopqrstuvwxyz</h1>\r\n<h1 [ngStyle]=\"headerStyle\">. ? ! / @ # $ % ^ &amp; * ( ) ~ - + = ' \" : ; &lt; &gt;</h1>\r\n<hr>\r\n<p [ngStyle]=\"textStyle\">The quick brown fox jumped over the lazy dog.</p>\r\n<p [ngStyle]=\"textStyle\">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>\r\n<p [ngStyle]=\"textStyle\">a b c d e f g h i j k l m n o p q r s t u v w x y z</p>\r\n<p [ngStyle]=\"textStyle\">ABCDEFGHIJKLMNOPQRSTUVWXYZ</p>\r\n<p [ngStyle]=\"textStyle\">abcdefghijklmnopqrstuvwxyz</p>\r\n<p [ngStyle]=\"textStyle\">. ? ! / @ # $ % ^ &amp; * ( ) ~ - + = ' \" : ; &lt; &gt;</p>\r\n<hr>\r\n<div class=\"controlsContainer\">\r\n  <div>\r\n    <select\r\n      [ngModel]=\"headerFont\"\r\n      (ngModelChange)=\"onModelChange(controlsEnum.header, $event)\"\r\n    >\r\n      <optgroup label=\"Header Fonts\">\r\n        <option *ngFor=\"let font of fontList$ | async\"\r\n          [ngValue]=\"font\"\r\n        >\r\n          {{ font.uiText }}\r\n        </option>\r\n      </optgroup>\r\n      <optgroup label=\"Text Fonts\">\r\n        <option *ngFor=\"let font of tFonts\"\r\n          [ngValue]=\"font\"\r\n        >\r\n          {{ font.uiText }}\r\n        </option>\r\n      </optgroup>\r\n    </select>\r\n    <br/>\r\n    <label for=\"headerBold\">Bold: </label>\r\n    <input type=\"checkbox\"\r\n      id=\"headerBold\"\r\n      [(ngModel)]=\"headerFont.properties.bold\"\r\n      (ngModelChange)=\"$event ? headerFont.properties.weight = 700 : headerFont.properties.weight = 400\"\r\n      [checked]=\"headerFont.properties.weight === 700\"\r\n    />\r\n    <p>Selected Font:<br>{{headerFont.uiText}}</p>\r\n    <p>bold: {{headerFont.properties.bold}}<br>weight: {{headerFont.properties.weight}}</p>\r\n  </div>\r\n\r\n  <div>\r\n    <select\r\n      [ngModel]=\"textFont\"\r\n      (ngModelChange)=\"onModelChange(controlsEnum.text, $event)\"\r\n    >\r\n      <option *ngFor=\"let font of fontOptions\"\r\n        [ngValue]=\"font\"\r\n      >\r\n        {{ font.uiText }}\r\n      </option>\r\n    </select>\r\n    <br/>\r\n    <p>Selected Font:<br>{{textFont.uiText}}</p>\r\n    <p>bold: {{textFont.properties.bold}}\r\n    <br>weight: {{textFont.properties.weight}}</p>\r\n  </div>\r\n\r\n\r\n  <div>\r\n    <checkbox\r\n      uiLabel='Bold'\r\n      [(checkedValue)]='checkedValue'\r\n    ></checkbox>\r\n    <p>Bold value: {{textFont.properties.bold}}</p>\r\n    <p>Weight value: {{textFont.properties.weight}}</p>\r\n  </div>\r\n\r\n    <!-- <checkbox [(ngModel)]=\"boldCheckbox\"></checkbox> -->\r\n    <!-- <input type=\"checkbox\"\r\n      id=\"textBold\"\r\n      [(ngModel)]=\"textFont.properties.bold\"\r\n      (ngModelChange)=\"$event ? textFont.properties.weight = 700 : textFont.properties.weight = 400\"\r\n      [checked]=\"textFont.properties.weight === 700\" -->\r\n    <!-- /> -->\r\n    <!-- <label for=\"textBold\"><span>Bold AT|jpgy</span></label>\r\n    <p>Selected Font:<br>{{textFont.uiText}}</p>\r\n    <p>bold: {{textFont.properties.bold}}<br>weight: {{textFont.properties.weight}}</p>\r\n  </div> -->\r\n\r\n\r\n  <div>\r\n    <h4>Add a new font</h4>\r\n    <label for=\"addFontFamily\">Family: </label>\r\n    <input type=\"text\"\r\n      id=\"addFontFamily\"\r\n      name='bogusName'\r\n      [(ngModel)]=\"fontNameToAdd\"\r\n      #addFontFamily=\"ngModel\"\r\n      required\r\n    />\r\n    <p>Input: {{ fontNameToAdd }}</p>\r\n    <p>Valid: {{ addFontFamily.valid }}</p>\r\n    <label for=\"addFontHref\">Href: </label>\r\n    <input type=\"text\"\r\n      id=\"addFontHref\"\r\n      [(ngModel)]=\"fontHrefToAdd\"\r\n      #addFontHref=\"ngModel\"\r\n    />\r\n    <p>Input: {{ fontNameToAdd }}</p>\r\n    <p>Valid: {{ addFontHref.valid }}</p>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class=\"controlsContainer\">\r\n  <div>\r\n    <input type=\"radio\"\r\n      name=\"testRadio\"\r\n      id=\"testRadio1\"\r\n    />\r\n    <label for=\"testRadio1\"><span>Test Radio jpgy</span></label>\r\n    <br><br>\r\n    <input type=\"radio\"\r\n      name=\"testRadio\"\r\n      id=\"testRadio2\"\r\n    />\r\n    <label for=\"testRadio2\"><span>jpgy Test Radio</span></label>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { ServerTestService } from '../../services/server-test/server-test.service';\r\nimport { ServerTestData } from '../../services/server-test/server-test.model';\r\nimport { Subscription, Subject, Observable } from 'rxjs';\r\nimport { takeUntil, take } from 'rxjs/operators';\r\n\r\nlet a = { prop: \"a\" };\r\n\r\n@Component({\r\n  selector: 'app-server-test',\r\n  templateUrl: './server-test.component.html',\r\n  styleUrls: ['./server-test.component.scss']\r\n})\r\nexport class ServerTestComponent implements OnInit, OnDestroy {\r\n\r\n  public serverResponse$: Observable<ServerTestData>;\r\n\r\n  constructor(public serverTestService: ServerTestService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //this.serverResponse$ = this.serverTestService.getServerTestData$();\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  getAnswer() {\r\n    console.log('**** component getAnswer()');\r\n    this.serverResponse$ = this.serverTestService.getServerTestData$();\r\n    //this.serverTestService.getServerTestData$();\r\n  }\r\n}\r\n","<br/>\r\n<hr/>\r\n<h1>Server Test</h1>\r\n\r\n<button (click)=\"getAnswer()\">server test</button>\r\n\r\n<p *ngFor=\"let item of serverResponse$ | async\"\r\n  class=\"bordered\"\r\n>\r\n  Return var: {{ item?.test_id }}\r\n</p>\r\n","import { Component, OnInit, Renderer2, ElementRef, forwardRef, Input, EventEmitter, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\r\nimport { UiFont } from '../../../models/ui-font.model';\r\n\r\n@Component({\r\n  selector: 'checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CheckboxComponent implements OnInit {\r\n\r\n  @Input() uiLabel: string = '';\r\n\r\n  @Output() checkedValueChange = new EventEmitter<boolean>();\r\n  @Input() get checkedValue() {\r\n    console.log('checkbox getter: ' + this._checkedValue);\r\n    return this._checkedValue;\r\n  }\r\n  set checkedValue(newVal) {\r\n    console.log('checkbox setter: ' + this._checkedValue + ' -> ' + newVal);\r\n    this._checkedValue = newVal;\r\n\r\n    // emit our checkValueChanged event to outside listeners\r\n    this.checkedValueChange.emit(this._checkedValue);\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  static idCounter: number = 0;\r\n  controlID: string;\r\n  checked: boolean;\r\n  private _checkedValue: boolean = false;\r\n\r\n  constructor(private renderer: Renderer2, private elementRef: ElementRef, private cdr: ChangeDetectorRef) {\r\n\r\n    this.controlID = \"myCheckbox\" + CheckboxComponent.idCounter++;\r\n    console.log('constructor: ' + this._checkedValue);\r\n  }\r\n\r\n  // Inputs are available now\r\n  ngOnInit(): void {\r\n    console.log('onInit: ' + this._checkedValue);\r\n  }\r\n\r\n  onChange($event: Event) {\r\n    console.log('checkbox change event: ' + $event);\r\n    //this.checked = event.target.checked;\r\n  }\r\n  onNgModelChange($newValue) {\r\n    console.log('checkbox model changed to new value: ' + $newValue);\r\n  }\r\n\r\n}\r\n","<input type=\"checkbox\"\r\n  id=\"textBold\"\r\n  [(ngModel)]=\"checkedValue\"\r\n  [checked]=\"checkedValue\"\r\n\r\n  (change)=\"onChange($event)\"\r\n  (ngModelChange)=\"onNgModelChange($event)\"\r\n/>\r\n<label for=\"textBold\">\r\n  <span>{{uiLabel}}</span>\r\n</label>\r\n<!-- <p>checkedValue:<br>{{checkedValue}}</p> -->\r\n","\r\ninterface FontProperties {\r\n  sizeRem?: number;\r\n  weight?: number;\r\n  bold?: boolean;\r\n  letterSpacingPx?: number;\r\n}\r\n\r\nexport interface IUiFont {\r\n  uiText?: string;\r\n  family: string;\r\n  hrefId?: string;\r\n  properties?: FontProperties;\r\n}\r\n\r\nexport class UiFont implements IUiFont {\r\n  readonly uiText: string;\r\n  readonly family: string;\r\n  readonly hrefId: string;\r\n  readonly properties: FontProperties;\r\n  constructor(font: IUiFont) {\r\n    if (!font.family) {\r\n      throw new Error('font.family must exist and not be an empty string in constructor argument for UiFont');\r\n    }\r\n    this.family = font.family;\r\n    this.uiText = font.uiText ? font.uiText : font.family;\r\n    this.hrefId = font.hrefId ? font.hrefId : font.family.split(' ').join('+');\r\n    this.properties = font.properties ? Object.assign({}, font.properties) : {};\r\n  }\r\n}\r\n\r\n/**\r\n * Include fonts here, will be downloaded via <link> element and added as an option in font dropdowns\r\n */\r\nconst uiFonts: IUiFont[] = [\r\n  { family: 'Alfa Slab One' },\r\n  { family: 'Anton' },\r\n  { family: 'Bevan' },\r\n  { family: 'Patua One' },\r\n  { family: 'Piedra' },\r\n  { family: 'PT Sans', hrefId: 'PT+Sans' },\r\n  { family: 'PT Sans', hrefId: 'PT+Sans:wght@700', uiText: 'PT Sans Bold', properties: {  weight: 700 } }\r\n];\r\n\r\nfunction generateFonts(fonts: IUiFont[]): UiFont[] {\r\n  return fonts.map(font => new UiFont(font));\r\n}\r\n\r\nexport const fonts: UiFont[] = generateFonts(uiFonts);\r\n\r\nconst _headerFonts: IUiFont[] = [\r\n  { family: 'Alfa Slab One' },\r\n  { family: 'Anton' },\r\n  { family: 'Bevan' },\r\n  { family: 'Patua One' },\r\n  { family: 'Piedra' },\r\n];\r\nconst _textFonts: IUiFont[] = [\r\n  { family: 'PT Sans', hrefId: 'PT+Sans' },\r\n  { family: 'PT Sans', hrefId: 'PT+Sans:wght@700', uiText: 'PT Sans Bold', properties: {  weight: 700 } }\r\n];\r\nexport const headerFonts = generateFonts(_headerFonts);\r\nexport const textFonts = generateFonts(_textFonts);\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n// shared from backend\r\nimport { routes } from '../../../../../server/app/routes';\r\n\r\nimport { UiFont, IUiFont } from '../../../models/ui-font.model';\r\nimport { Font } from './font.model';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FontApiService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getFonts$(): Observable<UiFont[]> {\r\n\r\n    console.log('**** API service getFonts()');\r\n    const results: Observable<Font[]> = this.http.get<Font[]>(routes.api._root + routes.api.font);\r\n\r\n    const uifontArray: Observable<UiFont[]>\r\n      = results.pipe(\r\n        map((fontArray: Font[]) => {\r\n          return fontArray.map( (font: Font) => {\r\n            const uifont: IUiFont = {\r\n              family: font.font_family,\r\n              uiText: font.ui_text,\r\n              hrefId: font.href_id,\r\n              // properties: font.properties, @TODO need to add properties to table and BE/FE API models\r\n            }\r\n            return new UiFont(uifont);\r\n          });\r\n        })\r\n    );\r\n    return uifontArray;\r\n  }\r\n\r\n  public getFontFamilyFavorites(): Observable<string[]> {\r\n    return this.http.get<string[]>(routes.api._root + routes.api.font + '?fontdata=family');\r\n\r\n  }\r\n\r\n  // public getFontFamilyBlacklist(): Observable<string[]> {\r\n\r\n  // }\r\n\r\n  public addFont(font: UiFont) {\r\n    // TODO\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, Subject, ReplaySubject } from 'rxjs';\r\n\r\nimport { GoogleFontsApi, GoogleFontsApiSort, GoogleFontsApiResponse} from './google-fonts-api.model';\r\nimport { shareReplay, pluck } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GoogleFontsApiService {\r\n\r\n  private readonly BASE_URL: string = 'https://www.googleapis.com/webfonts/v1/webfonts';\r\n  private readonly API_KEY: string = '?key=AIzaSyCqZ3dPYustmQUajzIhYu7MJeJ_ePHPnyk';\r\n  private readonly SORT_PARAM: string = '&sort=';\r\n  private readonly URL = this.BASE_URL + this.API_KEY + this.SORT_PARAM;\r\n  private readonly CACHE_SIZE: 1;\r\n\r\n  /**\r\n   * map of sharedReplay Observables to store caches of different sort methods\r\n   */\r\n  private cacheMap = new Map <GoogleFontsApiSort, Observable<GoogleFontsApi[]>>();\r\n\r\n  /**\r\n   * @param http HttpClient for API requests\r\n   */\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Gets an array of fonts from the Google Fonts API, optionally sorted\r\n   * @param sort [='popularity'] sort type option\r\n   * @param clearCache [=false] boolean to force API request\r\n   * @returns Observable of fonts array\r\n   */\r\n  public getFonts$(sort: GoogleFontsApiSort = 'popularity', clearCache: boolean = false): Observable<GoogleFontsApi[]> {\r\n    //console.time('getFonts$');\r\n\r\n    const url = this.URL + sort;\r\n    return this.getGoogleFontsData$(sort, url, clearCache);\r\n  }\r\n\r\n  /**\r\n   * Returns font data for the provided sort key, populating if necessary with a GET request to the provided URL\r\n   * @param sortKey Key for cache map\r\n   * @param url URL for API request\r\n   * @param clearCache [=false] boolean to force API request for new data\r\n   * @returns Observable of Google Fonts array\r\n   */\r\n  private getGoogleFontsData$(sortKey: GoogleFontsApiSort, url: string, clearCache: boolean = false): Observable<GoogleFontsApi[]> {\r\n    let cache$ = this.cacheMap.get(sortKey);\r\n    if (!cache$ || clearCache) {\r\n      //console.log('!!!!! GoogleFontsApiService.getGoogleFontsData$ making HTTP request !!!!!');\r\n      //console.time('Google Fonts Request');\r\n      cache$ = this.http\r\n        .get<GoogleFontsApiResponse>(url)\r\n        .pipe(\r\n          pluck('items'),\r\n          // enable 'multicast' style of notification for better performance (if we had multiple subscribers),\r\n          // and provide last value to each new subscriber\r\n          shareReplay(this.CACHE_SIZE),\r\n        );\r\n      this.cacheMap.set(sortKey, cache$);\r\n      //console.timeEnd('Google Fonts Request');\r\n    }\r\n    return cache$;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GoogleFontsApiService } from '../external/google/google-fonts-api.service';\r\nimport { GoogleFontsApi } from '../external/google/google-fonts-api.model';\r\nimport { FontApiService } from '../api/font/font.service';\r\nimport { HeadUriLoaderService } from '../head-uri-loader/head-uri-loader.service';\r\nimport { take } from 'rxjs/operators';\r\nimport { LoggerService } from '../logger/logger.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FontManagerService {\r\n\r\n  private googleFontCategories: Set<string> = new Set();\r\n\r\n  private blacklistedCategories: string[];\r\n\r\n  private allFonts: GoogleFontsApi[] = [];\r\n\r\n  private validCategoryFonts;\r\n  private blacklistedFonts;\r\n  private availableFonts;\r\n  private selectedFonts;\r\n  private fontsToDownload;\r\n\r\n  private timeStart;\r\n  private timeStop;\r\n\r\n  constructor(\r\n    private googleFontsApiService: GoogleFontsApiService,\r\n    private fontsApiService: FontApiService,\r\n    private headUriService: HeadUriLoaderService,\r\n    private logger: LoggerService\r\n  ) {\r\n    // this.logger.enableLogger(true);\r\n  }\r\n\r\n  public init() {\r\n\r\n    // this.logger.log('Test');\r\n    // this.logger.log('', undefined, { label: 'Get Font Categories', action: 'start' });\r\n    // this.logger.log('', { 'Categories Size': this.googleFontCategories.size, 'another var': 100 });\r\n\r\n    this.getAllGoogleFonts();\r\n  }\r\n\r\n  private getAllGoogleFonts() {\r\n    if (!this.allFonts || !this.allFonts.length) {\r\n      this.googleFontsApiService.getFonts$('popularity')\r\n        .pipe(take(1))\r\n        .subscribe(fonts => {\r\n          this.allFonts = fonts;\r\n          // debugger;\r\n          // this.logger.log('', undefined, { label: 'getFonts$', action: 'stop' });\r\n          this.parseFontsForCategories();\r\n        });\r\n    }\r\n  }\r\n\r\n  private parseFontsForCategories() {\r\n    // add category of each font to Set to retrieve unique category values\r\n    this.allFonts.forEach(font => {\r\n      this.googleFontCategories.add(font.category)\r\n    });\r\n\r\n    // this.logger.log('', [{ 'Categories Size': this.googleFontCategories.size, Categories: this.googleFontCategories }]);\r\n    // this.logger.log('', null, { label: 'Get Font Categories', action: 'stop' });\r\n  }\r\n\r\n  private getSelectableFonts() {\r\n\r\n  }\r\n\r\n  private getBlacklistedFonts() {\r\n\r\n  }\r\n}\r\n","import { Injectable, Renderer2, Inject, RendererFactory2 } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { fonts } from '../../models/ui-font.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HeadUriLoaderService {\r\n\r\n  private readonly fontBaseUrl = 'https://fonts.googleapis.com/css2?family=';\r\n  private readonly fontNameSeparator = '&family=';\r\n  private readonly fontBaseUrlParam = '&display=swap';\r\n\r\n  private fontLinkUrl: string;\r\n  private renderer: Renderer2;\r\n\r\n  constructor(\r\n    rendererFactory: RendererFactory2,\r\n    @Inject(DOCUMENT) private document: Document\r\n  ) {\r\n    // Renderer2 can't be injected (usually used in a Component), so create using factory\r\n    this.renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  public loadFontsLink() {\r\n    // construct the href string for the link element that will be appended to <head>\r\n    this.fontLinkUrl = this.fontBaseUrl;\r\n    this.fontLinkUrl += fonts.map(font => font.hrefId).join(this.fontNameSeparator);\r\n    this.fontLinkUrl += this.fontBaseUrlParam;\r\n    console.log('** fontLinkUrl: ' + this.fontLinkUrl);\r\n\r\n    // construct the link element to append\r\n    const fontLink: HTMLLinkElement = this.renderer.createElement('link');\r\n    fontLink.type = 'text/css';\r\n    fontLink.rel = 'stylesheet';\r\n    fontLink.href = this.fontLinkUrl;\r\n    fontLink.onload = this.onloadCallback.bind(this, ['fontLink']);\r\n    fontLink.onerror = this.onloadCallback.bind(this, ['fontLink Error']);\r\n\r\n    // append <link> to <head>\r\n    this.attachToHead(fontLink);\r\n  }\r\n\r\n  private attachToHead(element: HTMLLinkElement | HTMLScriptElement) {\r\n    const head: HTMLHeadElement = this.document.head || this.document.getElementsByTagName('head')[0];\r\n    head.appendChild(element);\r\n  }\r\n\r\n  public onloadCallback(args: string[]) {\r\n    console.log('** onloadCallback: ' + args[0]);\r\n  }\r\n}\r\n","// tslint:disable: no-console\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport type TimerActionType = 'start' | 'stop';\r\nexport interface LogTimer {\r\n  label: string;\r\n  action: TimerActionType;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggerService {\r\n\r\n  // private callers: Map<string, boolean> = new Map<string, boolean>();\r\n  // private currentCaller: string = '';\r\n\r\n  // constructor() { }\r\n\r\n  // public enableLogger(watch: boolean = false) {\r\n  //   const stack = new Error().stack;\r\n  //   const caller = this.getCallingFile(stack);\r\n  //   this.callers.set(caller, watch);\r\n  // }\r\n\r\n  // public log(text: string, props: { [key: string]: any } = {}, timer?: LogTimer) {\r\n  //   const stack = new Error().stack;\r\n  //   const caller = this.getCallingFile(stack);\r\n  //   const logEnabled = this.callers.get(caller);\r\n  //   debugger;\r\n  //   if (logEnabled) {\r\n  //     if (caller !== this.currentCaller) {\r\n  //       console.groupEnd();\r\n  //       console.group(caller);\r\n  //       this.currentCaller = caller;\r\n  //     }\r\n  //     if (timer?.action === 'start') {\r\n  //       debugger;\r\n  //       console.log('Start timer: ' + timer.label);\r\n  //       console.time(timer.label);\r\n  //     } else if (timer?.action === 'stop') {\r\n  //       debugger;\r\n  //       console.timeEnd(timer.label);\r\n  //     }\r\n\r\n  //     if (text) {\r\n  //       console.log(text + '\\n');\r\n  //     }\r\n\r\n  //     Object.keys(props).forEach(key => {\r\n  //     //props.forEach(prop => {\r\n  //       console.log(key + ' = ' + props[key]);\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  // private getCallingFile(stack: string): string {\r\n  //   let done = false;\r\n  //   let file: string;\r\n  //   let i = 1;\r\n  //   //debugger;\r\n  //   do {\r\n  //     const line = stack?.split('\\n')[i].trim();\r\n  //     let parts = line.split('at ');\r\n  //     parts = parts[1].split(' ');\r\n  //     if (!(parts[0].includes('LoggerService'))) {\r\n  //       done = true;\r\n  //       file = parts[0].includes('new') ? parts[1] : parts[0].split('.')[0];\r\n  //     }\r\n  //     i++;\r\n  //   } while (!done);\r\n  //   //debugger;\r\n  //   return file;\r\n  // }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ServerTestData } from './server-test.model';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n// shared from backend\r\nimport { routes } from '../../../../server/app/routes';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServerTestService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getServerTestData$(): Observable<ServerTestData> {\r\n\r\n    console.log('**** service getServerTestData()');\r\n    return this.http.get<ServerTestData>(routes.api._root + routes.api.test);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n// load snapsvg with types\r\nimport 'snapsvg-cjs';\r\nimport * as SNAPSVG_TYPE from 'snapsvg';\r\ndeclare var Snap: typeof SNAPSVG_TYPE;\r\n//declare var mina: any; // snapsvg animation\r\n\r\n@Component({\r\n  selector: 'app-animated-checkmark-svg',\r\n  templateUrl: './animated-checkmark-svg.component.html',\r\n  styleUrls: ['./animated-checkmark-svg.component.scss']\r\n})\r\nexport class AnimatedCheckmarkSvgComponent implements OnInit {\r\n\r\n  @Input() htmlId: string = '';\r\n  @Input() size: number;\r\n\r\n  private pathUn: SNAPSVG_TYPE.Element;\r\n  private pathMid: SNAPSVG_TYPE.Element;\r\n  private pathChk: SNAPSVG_TYPE.Element;\r\n\r\n  private dUn: string;\r\n  private dMid: string;\r\n  private dChk: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    // const s = Snap('#snapSvg');\r\n    // const c = s.circle(50, 50, 50);\r\n    // c.animate({r:10}, 2000);    \r\n    // c.attr({\r\n    //   fill: 'red',\r\n    //   stroke: 'yellow',\r\n    //   strokeWidth: 5\r\n    // });\r\n\r\n    // this.pathUn = Snap.select('#CheckedPath_un');\r\n    // this.pathMid = Snap.select('#CheckedPath_mid');\r\n    // this.pathChk = Snap.select('#CheckedPath_chk');\r\n    //debugger;\r\n    this.pathUn = Snap.select('.animated-checkmark-unchecked');\r\n    this.pathMid = Snap.select('.animated-checkmark-midchecked');\r\n    this.pathChk = Snap.select('.animated-checkmark-checked');\r\n\r\n    this.dUn = this.pathUn.node.getAttribute('d');\r\n    this.dMid =this.pathMid.node.getAttribute('d');\r\n    this.dChk =this.pathChk.node.getAttribute('d');\r\n\r\n    // var toUnchk = () => { this.pathUn.animate({ d: this.dUn }, 200, mina.easein, toMid1); }\r\n    // var toMid1 = () => { this.pathUn.animate({ d: this.dMid }, 200, mina.easeout, toChk); }\r\n    // var toChk = () => { this.pathUn.animate({ d: this.dChk }, 200, mina.easein, toMid2); }\r\n    // var toMid2 = () => { this.pathUn.animate({ d: this.dMid }, 200, mina.easeout, toUnchk); }\r\n\r\n    // var transitionChecked = this.animate.bind(this, )\r\n\r\n    //toMid1();\r\n  }\r\n\r\n  public checked: boolean = false;\r\n  private time: number = 80;\r\n  private midTr = mina.easein;\r\n  private lastTr = mina.easeout;\r\n\r\n  public animate() {\r\n    if (this.checked) {\r\n      this.transitionUnchecked()\r\n    } else {\r\n      this.transitionChecked();\r\n    }     \r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  private transitionChecked() {\r\n    var toMid1 = () => { this.pathUn.animate({ d: this.dMid }, this.time, this.midTr, toChk); }\r\n    var toChk = () => { this.pathUn.animate({ d: this.dChk }, this.time, this.lastTr); }\r\n    toMid1();\r\n\r\n    // let f = this.ani.bind(this, [this.dChk, this.time]);\r\n    // debugger;\r\n    // this.ani(this.dMid, this.time, f);\r\n  }\r\n  private transitionUnchecked() {\r\n    var toMid2 = () => { this.pathUn.animate({ d: this.dMid }, this.time, this.midTr, toUnchk); }\r\n    var toUnchk = () => { this.pathUn.animate({ d: this.dUn }, this.time, this.lastTr); }\r\n    toMid2();\r\n  }\r\n\r\n  private ani(d: string, time: number, callback?: () => {}) {\r\n    debugger;\r\n    if (callback) {\r\n      this.pathUn.animate({ d: d }, time, mina.linear, callback);\r\n    } else {\r\n      this.pathUn.animate({ d: d }, time, mina.linear);\r\n    }\r\n  }\r\n}\r\n","<!-- <div class=\"svg-div\" #svgArea>\r\n  <svg id=\"snapSvg\"></svg>\r\n</div> -->\r\n\r\n<!-- <div class=\"svg-div\">\r\n  <svg>\r\n    <image xlink:href=\"/assets/images/Check_Chk.svg\" width=\"300\"/>\r\n  </svg>\r\n</div> -->\r\n\r\n<button (click)=\"animate()\"\r\n  [id]=\"htmlId\"\r\n  class=\"svg-container\"\r\n>\r\n  <svg width=\"1e3\" height=\"1e3\" version=\"1.1\" viewBox=\"0 0 264.6 264.6\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g>\r\n      <path d=\"m264.6 264.6h-264.6v-264.6h264.6v264.6z\" fill=\"#de2726\" />\r\n      <path id=\"CheckedPath_un\" \r\n        class=\"animated-checkmark-unchecked\"\r\n        d=\"m2.375e-6 264.6h264.6v-264.6h-264.6v168.2z\"\r\n        fill=\"#ebebeb\" />\r\n    </g>\r\n  </svg>\r\n\r\n  <svg class=\"hidden\" width=\"1e3\" height=\"1e3\" version=\"1.1\" viewBox=\"0 0 264.6 264.6\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g>\r\n      <path d=\"m264.6 264.6h-264.6v-264.6h264.6v264.6z\" display=\"inline\" fill=\"#de2726\" />\r\n      <path id=\"CheckedPath_mid\"\r\n        class=\"animated-checkmark-midchecked\"\r\n        d=\"m101.5 186.9 60.63-0.4676 0.9351-108.8-18.55 0.1559-0.9352 90.09-42.08 0.3117z\"\r\n        display=\"inline\" \r\n        fill=\"#ebebeb\" />\r\n    </g>\r\n  </svg>\r\n\r\n  <svg class=\"hidden\" width=\"1e3\" height=\"1e3\" version=\"1.1\" viewBox=\"0 0 264.6 264.6\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g transform=\"translate(0 0)\">\r\n      <path d=\"m264.6 264.58h-264.6v-297.02h264.6v232.18z\" \r\n        display=\"inline\" \r\n        fill=\"#de2726\" />\r\n      <path id=\"CheckedPath_chk\" \r\n        class=\"animated-checkmark-checked\"\r\n        d=\"m11.5 136.48 86.4 85.08 155.2-152.5-26.45-26.01-128.7 126.1-59.95-59.07z\"\r\n        display=\"inline\" \r\n        fill=\"#ebebeb\" />\r\n    </g>\r\n  </svg>\r\n</button>\r\n<!-- <button (click)=\"animate()\">Animate</button>\r\n<label> Checked: {{checked}}</label> -->","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-animated-cube',\r\n  templateUrl: './animated-cube.component.html',\r\n  styleUrls: ['./animated-cube.component.scss']\r\n})\r\nexport class AnimatedCubeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"scene-3d\">\r\n  <div class=\"cube\">\r\n    <div class=\"face front\">front</div>\r\n    <div class=\"face right\">right</div>\r\n    <div class=\"face left\">left</div>\r\n    <div class=\"face back\">back</div>\r\n    <div class=\"face top\">top</div>\r\n    <div class=\"face bottom\">bottom</div>\r\n  </div>\r\n</div>","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-svg',\r\n  templateUrl: './checkbox-svg.component.html',\r\n  styleUrls: ['./checkbox-svg.component.scss']\r\n})\r\nexport class CheckboxSvgComponent implements OnInit {\r\n\r\n  @Input() htmlId: string = '';\r\n  @Input() uiLabel: string = '';\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-animated-checkmark-svg\r\n  [id]=\"htmlId + '_checkmark'\"\r\n></app-animated-checkmark-svg>\r\n<input type=\"checkbox\"\r\n  [id]=\"htmlId\"\r\n/>\r\n<label [for]=\"htmlId\">{{uiLabel}}</label>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}