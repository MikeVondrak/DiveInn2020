{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///server/app/routes.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/font-configuration/font-configuration.component.ts","webpack:///src/app/components/font-configuration/font-configuration.component.html","webpack:///src/app/components/font-test/font-test.component.ts","webpack:///src/app/components/font-test/font-test.component.html","webpack:///src/app/components/server-test/server-test.component.ts","webpack:///src/app/components/server-test/server-test.component.html","webpack:///src/app/components/shared/checkbox/checkbox.component.ts","webpack:///src/app/components/shared/checkbox/checkbox.component.html","webpack:///src/app/models/ui-font.model.ts","webpack:///src/app/services/api/font/font.service.ts","webpack:///src/app/services/external/google/google-fonts-api.service.ts","webpack:///src/app/services/font-manager/font-manager.service.ts","webpack:///src/app/services/head-uri-loader/head-uri-loader.service.ts","webpack:///src/app/services/logger/logger.service.ts","webpack:///src/app/services/server-test/server-test.service.ts","webpack:///src/app/shared/components/animated-checkmark-svg/animated-checkmark-svg.component.ts","webpack:///src/app/shared/components/animated-checkmark-svg/animated-checkmark-svg.component.html","webpack:///src/app/shared/components/animated-cube/animated-cube.component.ts","webpack:///src/app/shared/components/animated-cube/animated-cube.component.html","webpack:///src/app/shared/components/form-controls/checkbox-svg/checkbox-svg.component.ts","webpack:///src/app/shared/components/form-controls/checkbox-svg/checkbox-svg.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","api","_root","font","test","other","error","_404","AppRoutingModule","forRoot","imports","AppComponent","headUriLoader","title","loadFontsLink","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","FontConfigurationComponent","fontManagerService","init","ControlsEnum","FontTestComponent","fontService","fontsApiService","fontOptions","Object","assign","controlsEnum","headerStyle","textStyle","headerFont","textFont","find","uiText","hFonts","tFonts","_checkedValue","onModelChange","header","text","fontList$","getFonts$","pipe","subscribe","f","googleFontList","controlId","$newVal","buildStyleObject","family","styleObject","fontFamily","fontWeight","newStyle","newVal","setTimeout","properties","weight","bold","undefined","a","prop","ServerTestComponent","serverTestService","console","log","serverResponse$","getServerTestData$","getAnswer","CheckboxComponent","renderer","elementRef","cdr","uiLabel","checkedValueChange","controlID","idCounter","$event","$newValue","emit","detectChanges","onChange","onNgModelChange","changeDetection","OnPush","UiFont","hrefId","split","join","uiFonts","generateFonts","fonts","map","_headerFonts","_textFonts","headerFonts","textFonts","FontApiService","http","results","get","uifontArray","fontArray","uifont","font_family","ui_text","href_id","providedIn","GoogleFontsApiService","BASE_URL","API_KEY","SORT_PARAM","URL","cacheMap","Map","sort","clearCache","url","getGoogleFontsData$","sortKey","cache$","CACHE_SIZE","set","FontManagerService","googleFontsApiService","headUriService","logger","googleFontCategories","Set","allFonts","getAllGoogleFonts","length","parseFontsForCategories","forEach","add","category","HeadUriLoaderService","rendererFactory","document","fontBaseUrl","fontNameSeparator","fontBaseUrlParam","createRenderer","fontLinkUrl","fontLink","createElement","type","rel","href","onload","onloadCallback","bind","onerror","attachToHead","element","head","getElementsByTagName","appendChild","args","Document","LoggerService","ServerTestService","AnimatedCheckmarkSvgComponent","htmlId","checked","time","midTr","mina","easein","lastTr","easeout","pathUn","Snap","select","pathMid","pathChk","dUn","node","getAttribute","dMid","dChk","transitionUnchecked","transitionChecked","toMid1","animate","d","toChk","toMid2","toUnchk","callback","linear","AnimatedCubeComponent","CheckboxSvgComponent","environment","production","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;;;AAEO,QAAMC,MAAM,GAAG;AACpBC,SAAG,EAAE;AACHC,aAAK,EAAE,MADJ;AAEHC,YAAI,EAAE,OAFH;AAGHC,YAAI,EAAE,YAHH;AAIHC,aAAK,EAAE;AAJJ,OADe;AAOpBC,WAAK,EAAE;AACLC,YAAI,EAAE;AADD;AAPa,KAAf;;;;;;;;;;;;;;;;ACFP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,QAAMP,MAAM,GAAW,EAAvB;;QAMaQ,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBT,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBQ,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBT,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACV7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaa,Y;AAGX,4BAAoBC,aAApB,EAAyD;AAAA;;AAArC,aAAAA,aAAA,GAAAA,aAAA;AAFpB,aAAAC,KAAA,GAAQ,UAAR;AAGE;;;;mCAEM;AACN,eAAKD,aAAL,CAAmBE,aAAnB;AACD;;;;;;;uBARUH,Y,EAAY,uK;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,0F;AAAA;AAAA;ACTzB;;AACA;;AAEA;;AACA;;AAEA;;AAEA;;AAEA;;AAYA;;;;;;;;;sEDbaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTI,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;AETzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAmCaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,E;AAAE,gBANJ,CACP,uEADO,EAEP,oEAFO,EAGP,qEAHO,EAIP,0DAJO,CAMI;;;;0HAGFA,S,EAAS;AAAA,uBAlBlB,2DAkBkB,EAjBlB,iGAiBkB,EAhBlB,2FAgBkB,EAflB,gGAekB,EAdlB,8GAckB,EAblB,yIAakB,EAZlB,0HAYkB,EAXlB,uHAWkB;AAXQ,kBAG1B,uEAH0B,EAI1B,oEAJ0B,EAK1B,qEAL0B,EAM1B,0DAN0B;AAWR,O;AALP,K;;;;;sEAKFA,S,EAAS;cApBrB,sDAoBqB;eApBZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,iGAFY,EAGZ,2FAHY,EAIZ,gGAJY,EAKZ,8GALY,EAMZ,yIANY,EAOZ,0HAPY,EAQZ,uHARY,CADN;AAWRT,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,qEAHO,EAIP,0DAJO,CAXD;AAiBRU,mBAAS,EAAE,EAjBH;AAkBRC,mBAAS,EAAE,CAAC,2DAAD;AAlBH,S;AAoBY,Q;;;;;;;;;;;;;;;;;;ACnCtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaC,0B;AAEX,0CAAoBC,kBAApB,EAA4D;AAAA;;AAAxC,aAAAA,kBAAA,GAAAA,kBAAA;AAA2C;;;;mCAEvD;AACN,eAAKA,kBAAL,CAAwBC,IAAxB;AACD;;;;;;;uBANUF,0B,EAA0B,+J;AAAA,K;;;YAA1BA,0B;AAA0B,6C;AAAA,c;AAAA,a;AAAA;AAAA;ACRvC;;AAAI;;AAAkB;;;;;;;;sEDQTA,0B,EAA0B;cALtC,uDAKsC;eAL5B;AACTP,kBAAQ,EAAE,wBADD;AAETC,qBAAW,EAAE,qCAFJ;AAGTC,mBAAS,EAAE,CAAC,qCAAD;AAHF,S;AAK4B,Q;;;;;;;;;;;;;;;;;;;;;;AERvC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACuBQ;;AAGE;;AACF;;;;;;AAHE;;AAEA;;AAAA;;;;;;AAIF;;AAGE;;AACF;;;;;;AAHE;;AAEA;;AAAA;;;;;;AAqBJ;;AAGE;;AACF;;;;;;AAHE;;AAEA;;AAAA;;;;AD1CR,QAAKQ,YAAL;;AAAA,eAAKA,YAAL,EAAiB;AACf;AACA;AACD,KAHD,EAAKA,YAAY,KAAZA,YAAY,MAAjB;;QAUaC,iB;AAyBX;AAEA,iCAAoBC,WAApB,EAAyDC,eAAzD,EAAiG;AAAA;;AAA7E,aAAAD,WAAA,GAAAA,WAAA;AAAqC,aAAAC,eAAA,GAAAA,eAAA,CAAwC,CAzBjG;;AACgB,aAAAC,WAAA,GAAwBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,2DAAlB,CAAxB,CAwBiF,CAtBjG;;AACgB,aAAAC,YAAA,GAAeP,YAAf,CAqBiF,CApBjG;;AACO,aAAAQ,WAAA,GAAsB,EAAtB;AACA,aAAAC,SAAA,GAAoB,EAApB,CAkB0F,CAlBlE;AAC/B;;AACO,aAAAC,UAAA,GAAqB,kEAAY,CAAZ,CAArB;AACA,aAAAC,QAAA,GAAmB,KAAKP,WAAL,CAAiBQ,IAAjB,CACxB,UAAClC,IAAD;AAAA,iBAAUA,IAAI,CAACmC,MAAL,KAAgB,cAA1B;AAAA,SADwB,CAAnB;AAOA,aAAAC,MAAA,GAAS,iEAAT;AACA,aAAAC,MAAA,GAAS,+DAAT;AAgFP;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,aAAAC,aAAA,GAAyB,KAAzB;AAzF2F;;;;mCAE3F;AAAA;;AACN,eAAKC,aAAL,CAAmBjB,YAAY,CAACkB,MAAhC;AACA,eAAKD,aAAL,CAAmBjB,YAAY,CAACmB,IAAhC;AAEA,eAAKC,SAAL,GAAiB,KAAKlB,WAAL,CAAiBmB,SAAjB,EAAjB,CAJM,CAMN;;AACA,eAAKlB,eAAL,CAAqBkB,SAArB,CAA+B,YAA/B,EACGC,IADH,CACQ,4DAAK,CAAL,CADR,EAEGC,SAFH,CAEa,UAAAC,CAAC,EAAI;AACd,iBAAI,CAACC,cAAL,GAAsBD,CAAtB,CADc,CAEd;AACA;AACA;AACA;AACD,WARH,EAPM,CAiBN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAED;;;;;;;;;sCAMqBE,S,EAAyBC,O,EAAkB;AAC9D,cAAIA,OAAJ,EAAa;AACX,oBAAQD,SAAR;AACE,mBAAK1B,YAAY,CAACkB,MAAlB;AACE;AACA,qBAAKV,WAAL,GAAmB,KAAKoB,gBAAL,CACjB,KAAKpB,WADY,EAEjBmB,OAAO,CAACE,MAFS,CAAnB;AAIA;;AACF,mBAAK7B,YAAY,CAACmB,IAAlB;AACE;AACA,qBAAKV,SAAL,GAAiB,KAAKmB,gBAAL,CACf,KAAKnB,SADU,EAEfkB,OAAO,CAACE,MAFO,CAAjB;AAIA;AAdJ;AAgBD;AACF;;;;AAwCD;;;;yCAKEC,W,EACAC,U,EACAC,U,EAAmB;AAEnB,cAAMC,QAAQ,GAAG;AACf,2BAAeF,UAAU,GAAGA,UAAH,GAAgBD,WAAW,CAAC,aAAD,CADrC;AAEf,2BAAeE,UAAU,GAAGA,UAAH,GAAgBF,WAAW,CAAC,aAAD;AAFrC,WAAjB;AAIA,iBAAOG,QAAP;AACD;;;4BAlCkB;AACjB,iBAAO,KAAKjB,aAAZ;AACD,S;0BAEgBkB,M,EAAQ;AAAA;;AACvBC,oBAAU,CAAC,YAAM;AACf,kBAAI,CAACnB,aAAL,GAAqBkB,MAArB;AACAA,kBAAM,GACD,MAAI,CAACvB,QAAL,CAAcyB,UAAd,CAAyBC,MAAzB,GAAkC,GADjC,GAED,MAAI,CAAC1B,QAAL,CAAcyB,UAAd,CAAyBC,MAAzB,GAAkC,GAFvC;AAGA,kBAAI,CAAC1B,QAAL,CAAcyB,UAAd,CAAyBE,IAAzB,GAAgCJ,MAAhC;AAEA,kBAAI,CAACzB,SAAL,GAAiB,MAAI,CAACmB,gBAAL,CACf,MAAI,CAACnB,SADU,EAEf8B,SAFe,EAGf,MAAI,CAAC5B,QAAL,CAAcyB,UAAd,CAAyBC,MAHV,CAAjB;AAKD,WAZS,CAAV;AAaD;;;;;;;uBAxIUpC,iB,EAAiB,+I,EAAA,yK;AAAA,K;;;YAAjBA,iB;AAAiB,oC;AAAA,e;AAAA,c;AAAA,kzB;AAAA;AAAA;ACvB9B;;AAA4B;;AAAwB;;AACpD;;AAA4B;;AAAmD;;AAC/E;;AAA4B;;AAAmD;;AAC/E;;AAA4B;;AAA0B;;AACtD;;AAA4B;;AAA0B;;AACtD;;AAA4B;;AAAuD;;AACnF;;AACA;;AAAyB;;AAA6C;;AACtE;;AAAyB;;AAAmD;;AAC5E;;AAAyB;;AAAmD;;AAC5E;;AAAyB;;AAA0B;;AACnD;;AAAyB;;AAA0B;;AACnD;;AAAyB;;AAAuD;;AAChF;;AACA;;AACE;;AACE;;AAEE;AAAA,mBAAiB,IAAAgB,aAAA,iCAAjB;AAA2D,WAA3D;;AAEA;;AACE;;;;AAKF;;AACA;;AACE;;AAKF;;AACF;;AACA;;AACA;;AAAwB;;AAAM;;AAC9B;;AAEE;AAAA;AAAA,aAAwC,eAAxC,EAAwC;AAAA,+DACiB,GADjB,GACuB,GAAH,WAAG,CAAH,UAAG,CAAH,MAAG,GAA+B,GADtD;AACyD,WADjG;;AAFF;;AAMA;;AAAG;;AAAc;;AAAI;;AAAqB;;AAC1C;;AAAG;;AAAoC;;AAAI;;AAAwC;;AACrF;;AAEA;;AACE;;AAEE;AAAA,mBAAiB,IAAAA,aAAA,+BAAjB;AAAyD,WAAzD;;AAEA;;AAKF;;AACA;;AACA;;AAAG;;AAAc;;AAAI;;AAAmB;;AACxC;;AAAG;;AACH;;AAAI;;AAAsC;;AAC5C;;AAGA;;AACE;;AAEE;AAAA;AAAA;;AACD;;AACD;;AAAG;;AAAwC;;AAC3C;;AAAG;;AAA4C;;AACjD;;AAeA;;AACE;;AAAI;;AAAc;;AAClB;;AAA2B;;AAAQ;;AACnC;;AAGE;AAAA;AAAA;;AAHF;;AAOA;;AAAG;;AAA0B;;AAC7B;;AAAG;;AAAgC;;AACnC;;AAAyB;;AAAM;;AAC/B;;AAEE;AAAA;AAAA;;AAFF;;AAKA;;AAAG;;AAA0B;;AAC7B;;AAAG;;AAA8B;;AACnC;;AACF;;AAGA;;AACE;;AACE;;AAIA;;AAAwB;;AAAM;;AAAe;;AAAO;;AACpD;;AAAI;;AACJ;;AAIA;;AAAwB;;AAAM;;AAAe;;AAAO;;AACtD;;AACF;;;;;;;;AA7HI;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAED;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAKG;;AAAA;;AAIU;;AAAA;;AAOA;;AAAA;;AAWV;;AAAA,8GAAwC,SAAxC,EAAwC,wCAAxC;;AAImB;;AAAA;;AAClB;;AAAA,+GAAAqB,IAAA;;AAAwC;;AAAA,iHAAAD,MAAA;;AAKzC;;AAAA;;AAGQ;;AAAA;;AAOW;;AAAA;;AAClB;;AAAA,6GAAAC,IAAA;;AACC;;AAAA,+GAAAD,MAAA;;AAOF;;AAAA;;AAEC;;AAAA;;AACA;;AAAA;;AAsBD;;AAAA;;AAIC;;AAAA;;AACA;;AAAA;;AAID;;AAAA;;AAGC;;AAAA;;AACA;;AAAA;;;;;;;;;;sEDnFMpC,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTX,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEzB9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACMA;;AAGE;;AACF;;;;;;AADE;;AAAA;;;;ADFF,QAAIgD,CAAC,GAAG;AAAEC,UAAI,EAAE;AAAR,KAAR;;QAOaC,mB;AAIX,mCAAmBC,iBAAnB,EAAyD;AAAA;;AAAtC,aAAAA,iBAAA,GAAAA,iBAAA;AAClB;;;;mCAEO,CACN;AACD;;;sCACU,CACV;;;oCAEW;AACVC,iBAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,eAAKC,eAAL,GAAuB,KAAKH,iBAAL,CAAuBI,kBAAvB,EAAvB,CAFU,CAGV;AACD;;;;;;;uBAjBUL,mB,EAAmB,4J;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,c;AAAA,a;AAAA,2F;AAAA;AAAA;ACdhC;;AACA;;AACA;;AAAI;;AAAW;;AAEf;;AAAQ;AAAA,mBAAS,IAAAM,SAAA,EAAT;AAAoB,WAApB;;AAAsB;;AAAW;;AAEzC;;;;;;AAAG;;AAAA;;;;;;;;;;sEDQUN,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTpD,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,8BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;AEdhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUayD,iB;AAuBX,iCAAoBC,QAApB,EAAiDC,UAAjD,EAAiFC,GAAjF,EAAyG;AAAA;;AAArF,aAAAF,QAAA,GAAAA,QAAA;AAA6B,aAAAC,UAAA,GAAAA,UAAA;AAAgC,aAAAC,GAAA,GAAAA,GAAA;AArBxE,aAAAC,OAAA,GAAkB,EAAlB;AAEC,aAAAC,kBAAA,GAAqB,IAAI,0DAAJ,EAArB;AAiBF,aAAAtC,aAAA,GAAyB,KAAzB;AAIN,aAAKuC,SAAL,GAAiB,eAAeN,iBAAiB,CAACO,SAAlB,EAAhC;AACAZ,eAAO,CAACC,GAAR,CAAY,kBAAkB,KAAK7B,aAAnC;AACD;;;;AAED;mCACQ;AACN4B,iBAAO,CAACC,GAAR,CAAY,aAAa,KAAK7B,aAA9B;AACD;;;iCAEQyC,M,EAAe;AACtBb,iBAAO,CAACC,GAAR,CAAY,4BAA4BY,MAAxC,EADsB,CAEtB;AACD;;;wCACeC,S,EAAW;AACzBd,iBAAO,CAACC,GAAR,CAAY,0CAA0Ca,SAAtD;AACD;;;4BAnC2B;AAC1Bd,iBAAO,CAACC,GAAR,CAAY,sBAAsB,KAAK7B,aAAvC;AACA,iBAAO,KAAKA,aAAZ;AACD,S;0BACgBkB,M,EAAQ;AACvBU,iBAAO,CAACC,GAAR,CAAY,sBAAsB,KAAK7B,aAA3B,GAA2C,MAA3C,GAAoDkB,MAAhE;AACA,eAAKlB,aAAL,GAAqBkB,MAArB,CAFuB,CAIvB;;AACA,eAAKoB,kBAAL,CAAwBK,IAAxB,CAA6B,KAAK3C,aAAlC;AACA,eAAKoC,GAAL,CAASQ,aAAT;AACD;;;;;;AAEM,sBAAAJ,SAAA,GAAoB,CAApB;;;uBAlBIP,iB,EAAiB,wH,EAAA,yH,EAAA,gI;AAAA,K;;;YAAjBA,iB;AAAiB,+B;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,+H;AAAA;AAAA;ACV9B;;AAEE;AAAA;AAAA,aAA0B,QAA1B,EAA0B;AAAA,mBAGhB,IAAAY,QAAA,QAHgB;AAGA,WAH1B,EAA0B,eAA1B,EAA0B;AAAA,mBAIT,IAAAC,eAAA,QAJS;AAIc,WAJxC;;AAFF;;AAQA;;AACE;;AAAM;;AAAW;;AACnB;;;;AARE,gGAA0B,SAA1B,EAA0B,gBAA1B;;AAOM;;AAAA;;;;;;;;;;sEDCKb,iB,EAAiB;cAN7B,uDAM6B;eANnB;AACT3D,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD,CAHF;AAITuE,yBAAe,EAAE,sEAAwBC;AAJhC,S;AAMmB,Q;;;;;;;;;;gBAE3B;;;gBAEA;;;gBACA;;;;;;;;;;;;;;;;;;;;AEAH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,M,GAKX,gBAAYvF,IAAZ,EAA2B;AAAA;;AACzB,UAAI,CAACA,IAAI,CAACmD,MAAV,EAAkB;AAChB,cAAM,IAAI5D,KAAJ,CAAU,sFAAV,CAAN;AACD;;AACD,WAAK4D,MAAL,GAAcnD,IAAI,CAACmD,MAAnB;AACA,WAAKhB,MAAL,GAAcnC,IAAI,CAACmC,MAAL,GAAcnC,IAAI,CAACmC,MAAnB,GAA4BnC,IAAI,CAACmD,MAA/C;AACA,WAAKqC,MAAL,GAAcxF,IAAI,CAACwF,MAAL,GAAcxF,IAAI,CAACwF,MAAnB,GAA4BxF,IAAI,CAACmD,MAAL,CAAYsC,KAAZ,CAAkB,GAAlB,EAAuBC,IAAvB,CAA4B,GAA5B,CAA1C;AACA,WAAKhC,UAAL,GAAkB1D,IAAI,CAAC0D,UAAL,GAAkB/B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB5B,IAAI,CAAC0D,UAAvB,CAAlB,GAAuD,EAAzE;AACD,K;AAGH;;;;;AAGA,QAAMiC,OAAO,GAAc,CACzB;AAAExC,YAAM,EAAE;AAAV,KADyB,EAEzB;AAAEA,YAAM,EAAE;AAAV,KAFyB,EAGzB;AAAEA,YAAM,EAAE;AAAV,KAHyB,EAIzB;AAAEA,YAAM,EAAE;AAAV,KAJyB,EAKzB;AAAEA,YAAM,EAAE;AAAV,KALyB,EAMzB;AAAEA,YAAM,EAAE,SAAV;AAAqBqC,YAAM,EAAE;AAA7B,KANyB,EAOzB;AAAErC,YAAM,EAAE,SAAV;AAAqBqC,YAAM,EAAE,kBAA7B;AAAiDrD,YAAM,EAAE,cAAzD;AAAyEuB,gBAAU,EAAE;AAAGC,cAAM,EAAE;AAAX;AAArF,KAPyB,CAA3B;;AAUA,aAASiC,aAAT,CAAuBC,KAAvB,EAAuC;AACrC,aAAOA,KAAK,CAACC,GAAN,CAAU,UAAA9F,IAAI;AAAA,eAAI,IAAIuF,MAAJ,CAAWvF,IAAX,CAAJ;AAAA,OAAd,CAAP;AACD;;AAEM,QAAM6F,KAAK,GAAaD,aAAa,CAACD,OAAD,CAArC;AAEP,QAAMI,YAAY,GAAc,CAC9B;AAAE5C,YAAM,EAAE;AAAV,KAD8B,EAE9B;AAAEA,YAAM,EAAE;AAAV,KAF8B,EAG9B;AAAEA,YAAM,EAAE;AAAV,KAH8B,EAI9B;AAAEA,YAAM,EAAE;AAAV,KAJ8B,EAK9B;AAAEA,YAAM,EAAE;AAAV,KAL8B,CAAhC;AAOA,QAAM6C,UAAU,GAAc,CAC5B;AAAE7C,YAAM,EAAE,SAAV;AAAqBqC,YAAM,EAAE;AAA7B,KAD4B,EAE5B;AAAErC,YAAM,EAAE,SAAV;AAAqBqC,YAAM,EAAE,kBAA7B;AAAiDrD,YAAM,EAAE,cAAzD;AAAyEuB,gBAAU,EAAE;AAAGC,cAAM,EAAE;AAAX;AAArF,KAF4B,CAA9B;AAIO,QAAMsC,WAAW,GAAGL,aAAa,CAACG,YAAD,CAAjC;AACA,QAAMG,SAAS,GAAGN,aAAa,CAACI,UAAD,CAA/B;;;;;;;;;;;;;;;;AC9DP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,uD,CAIA;;;QAUaG,c;AAEX,8BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;;;;oCAEzB;AAEdlC,iBAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,cAAMkC,OAAO,GAAuB,KAAKD,IAAL,CAAUE,GAAV,CAAsB,0DAAOxG,GAAP,CAAWC,KAAX,GAAmB,0DAAOD,GAAP,CAAWE,IAApD,CAApC;AAEA,cAAMuG,WAAW,GACbF,OAAO,CAACzD,IAAR,CACA,2DAAI,UAAC4D,SAAD,EAAuB;AACzB,mBAAOA,SAAS,CAACV,GAAV,CAAe,UAAC9F,IAAD,EAAgB;AACpC,kBAAMyG,MAAM,GAAY;AACtBtD,sBAAM,EAAEnD,IAAI,CAAC0G,WADS;AAEtBvE,sBAAM,EAAEnC,IAAI,CAAC2G,OAFS;AAGtBnB,sBAAM,EAAExF,IAAI,CAAC4G;AAHS,eAAxB;AAMA,qBAAO,IAAI,4DAAJ,CAAWH,MAAX,CAAP;AACD,aARM,CAAP;AASD,WAVD,CADA,CADJ;AAcA,iBAAOF,WAAP;AACD;;;iDAE4B;AAC3B,iBAAO,KAAKH,IAAL,CAAUE,GAAV,CAAwB,0DAAOxG,GAAP,CAAWC,KAAX,GAAmB,0DAAOD,GAAP,CAAWE,IAA9B,GAAqC,kBAA7D,CAAP;AAED,S,CAED;AAEA;;;;gCAEeA,I,EAAc,CAC3B;AACD;;;;;;;uBArCUmG,c,EAAc,uH;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVU,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;ACd3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaC,qB;AAaX;;;AAGA,qCAAoBV,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAdH,aAAAW,QAAA,GAAmB,iDAAnB;AACA,aAAAC,OAAA,GAAkB,8CAAlB;AACA,aAAAC,UAAA,GAAqB,QAArB;AACA,aAAAC,GAAA,GAAM,KAAKH,QAAL,GAAgB,KAAKC,OAArB,GAA+B,KAAKC,UAA1C;AAGjB;;;;AAGQ,aAAAE,QAAA,GAAW,IAAIC,GAAJ,EAAX;AAKiC;AAEzC;;;;;;;;;;oCAMqF;AAAA,cAApEC,IAAoE,uEAAzC,YAAyC;AAAA,cAA3BC,UAA2B,uEAAL,KAAK;AACnF;AAEA,cAAMC,GAAG,GAAG,KAAKL,GAAL,GAAWG,IAAvB;AACA,iBAAO,KAAKG,mBAAL,CAAyBH,IAAzB,EAA+BE,GAA/B,EAAoCD,UAApC,CAAP;AACD;AAED;;;;;;;;;;4CAO4BG,O,EAA6BF,G,EAAwC;AAAA,cAA3BD,UAA2B,uEAAL,KAAK;AAC/F,cAAII,MAAM,GAAG,KAAKP,QAAL,CAAcb,GAAd,CAAkBmB,OAAlB,CAAb;;AACA,cAAI,CAACC,MAAD,IAAWJ,UAAf,EAA2B;AACzB;AACA;AACAI,kBAAM,GAAG,KAAKtB,IAAL,CACNE,GADM,CACsBiB,GADtB,EAEN3E,IAFM,CAGL,6DAAM,OAAN,CAHK,EAIL;AACA;AACA,+EAAY,KAAK+E,UAAjB,CANK,CAAT;AAQA,iBAAKR,QAAL,CAAcS,GAAd,CAAkBH,OAAlB,EAA2BC,MAA3B,EAXyB,CAYzB;AACD;;AACD,iBAAOA,MAAP;AACD;;;;;;;uBAvDUZ,qB,EAAqB,uH;AAAA,K;;;aAArBA,qB;AAAqB,eAArBA,qBAAqB,K;AAAA,kBAFpB;;;;;sEAEDA,qB,EAAqB;cAHjC,wDAGiC;eAHtB;AACVD,oBAAU,EAAE;AADF,S;AAGsB,Q;;;;;;;;;;;;;;;;;;;;;;ACVlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWagB,kB;AAiBX,kCACUC,qBADV,EAEUrG,eAFV,EAGUsG,cAHV,EAIUC,MAJV,EAI+B;AAAA;;AAHrB,aAAAF,qBAAA,GAAAA,qBAAA;AACA,aAAArG,eAAA,GAAAA,eAAA;AACA,aAAAsG,cAAA,GAAAA,cAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AAnBF,aAAAC,oBAAA,GAAoC,IAAIC,GAAJ,EAApC;AAIA,aAAAC,QAAA,GAA6B,EAA7B,CAeuB,CAE7B;AACD;;;;+BAEa;AAEZ;AACA;AACA;AAEA,eAAKC,iBAAL;AACD;;;4CAE2B;AAAA;;AAC1B,cAAI,CAAC,KAAKD,QAAN,IAAkB,CAAC,KAAKA,QAAL,CAAcE,MAArC,EAA6C;AAC3C,iBAAKP,qBAAL,CAA2BnF,SAA3B,CAAqC,YAArC,EACGC,IADH,CACQ,4DAAK,CAAL,CADR,EAEGC,SAFH,CAEa,UAAAgD,KAAK,EAAI;AAClB,oBAAI,CAACsC,QAAL,GAAgBtC,KAAhB,CADkB,CAElB;AACA;;AACA,oBAAI,CAACyC,uBAAL;AACD,aAPH;AAQD;AACF;;;kDAEiC;AAAA;;AAChC;AACA,eAAKH,QAAL,CAAcI,OAAd,CAAsB,UAAAvI,IAAI,EAAI;AAC5B,kBAAI,CAACiI,oBAAL,CAA0BO,GAA1B,CAA8BxI,IAAI,CAACyI,QAAnC;AACD,WAFD,EAFgC,CAMhC;AACA;AACD;;;6CAE4B,CAE5B;;;8CAE6B,CAE7B;;;;;;;uBAhEUZ,kB,EAAkB,uJ,EAAA,6H,EAAA,qJ,EAAA,4H;AAAA,K;;;aAAlBA,kB;AAAkB,eAAlBA,kBAAkB,K;AAAA,kBAFjB;;;;;sEAEDA,kB,EAAkB;cAH9B,wDAG8B;eAHnB;AACVhB,oBAAU,EAAE;AADF,S;AAGmB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACX/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa6B,oB;AASX,oCACEC,eADF,EAE4BC,QAF5B,EAE8C;AAAA;;AAAlB,aAAAA,QAAA,GAAAA,QAAA;AATX,aAAAC,WAAA,GAAc,2CAAd;AACA,aAAAC,iBAAA,GAAoB,UAApB;AACA,aAAAC,gBAAA,GAAmB,eAAnB,CAO6B,CAE5C;;AACA,aAAKvE,QAAL,GAAgBmE,eAAe,CAACK,cAAhB,CAA+B,IAA/B,EAAqC,IAArC,CAAhB;AACD;;;;wCAEsB;AACrB;AACA,eAAKC,WAAL,GAAmB,KAAKJ,WAAxB;AACA,eAAKI,WAAL,IAAoB,4DAAMnD,GAAN,CAAU,UAAA9F,IAAI;AAAA,mBAAIA,IAAI,CAACwF,MAAT;AAAA,WAAd,EAA+BE,IAA/B,CAAoC,KAAKoD,iBAAzC,CAApB;AACA,eAAKG,WAAL,IAAoB,KAAKF,gBAAzB;AACA7E,iBAAO,CAACC,GAAR,CAAY,qBAAqB,KAAK8E,WAAtC,EALqB,CAOrB;;AACA,cAAMC,QAAQ,GAAoB,KAAK1E,QAAL,CAAc2E,aAAd,CAA4B,MAA5B,CAAlC;AACAD,kBAAQ,CAACE,IAAT,GAAgB,UAAhB;AACAF,kBAAQ,CAACG,GAAT,GAAe,YAAf;AACAH,kBAAQ,CAACI,IAAT,GAAgB,KAAKL,WAArB;AACAC,kBAAQ,CAACK,MAAT,GAAkB,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EAA+B,CAAC,UAAD,CAA/B,CAAlB;AACAP,kBAAQ,CAACQ,OAAT,GAAmB,KAAKF,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EAA+B,CAAC,gBAAD,CAA/B,CAAnB,CAbqB,CAerB;;AACA,eAAKE,YAAL,CAAkBT,QAAlB;AACD;;;qCAEoBU,O,EAA8C;AACjE,cAAMC,IAAI,GAAoB,KAAKjB,QAAL,CAAciB,IAAd,IAAsB,KAAKjB,QAAL,CAAckB,oBAAd,CAAmC,MAAnC,EAA2C,CAA3C,CAApD;AACAD,cAAI,CAACE,WAAL,CAAiBH,OAAjB;AACD;;;uCAEqBI,I,EAAgB;AACpC9F,iBAAO,CAACC,GAAR,CAAY,wBAAwB6F,IAAI,CAAC,CAAD,CAAxC;AACD;;;;;;;uBA3CUtB,oB,EAAoB,sH,EAAA,uDAWrB,wDAXqB,C;AAWb,K;;;aAXPA,oB;AAAoB,eAApBA,oBAAoB,K;AAAA,kBAFnB;;;;;sEAEDA,oB,EAAoB;cAHhC,wDAGgC;eAHrB;AACV7B,oBAAU,EAAE;AADF,S;AAGqB,Q;;;;gBAWOoD,Q;AAAQ;kBAA3C,oDAA2C;mBAApC,wD;AAAoC;;;;;;;;;;;;;;;;;;;;ACnBhD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,kE,CAAA;;;QAYaC,a;;;;;uBAAAA,a;AAAa,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBAFZ;;;;;sEAEDA,a,EAAa;cAHzB,wDAGyB;eAHd;AACVrD,oBAAU,EAAE;AADF,S;AAGc,Q;;;;;;;;;;;;;;;;;;ACZ1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,8B,CAMA;;;QAMasD,iB;AAEX,iCAAoB/D,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;;;;6CAEhB;AAEvBlC,iBAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,iBAAO,KAAKiC,IAAL,CAAUE,GAAV,CAA8B,0DAAOxG,GAAP,CAAWC,KAAX,GAAmB,0DAAOD,GAAP,CAAWG,IAA5D,CAAP;AACD;;;;;;;uBARUkK,iB,EAAiB,uH;AAAA,K;;;aAAjBA,iB;AAAiB,eAAjBA,iBAAiB,K;AAAA,kBAFhB;;;;;sEAEDA,iB,EAAiB;cAH7B,wDAG6B;eAHlB;AACVtD,oBAAU,EAAE;AADF,S;AAGkB,Q;;;;;;;;;;;;;;;;;;;;;;ACZ9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA,wI,CAEA;AAIA;;;QAOauD,6B;AAaX,+CAAc;AAAA;;AAXL,aAAAC,MAAA,GAAiB,EAAjB;AA6CF,aAAAC,OAAA,GAAmB,KAAnB;AACC,aAAAC,IAAA,GAAe,EAAf;AACA,aAAAC,KAAA,GAAQC,IAAI,CAACC,MAAb;AACA,aAAAC,MAAA,GAASF,IAAI,CAACG,OAAd;AArCS;;;;mCAET;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,eAAKC,MAAL,GAAcC,IAAI,CAACC,MAAL,CAAY,+BAAZ,CAAd;AACA,eAAKC,OAAL,GAAeF,IAAI,CAACC,MAAL,CAAY,gCAAZ,CAAf;AACA,eAAKE,OAAL,GAAeH,IAAI,CAACC,MAAL,CAAY,6BAAZ,CAAf;AAEA,eAAKG,GAAL,GAAW,KAAKL,MAAL,CAAYM,IAAZ,CAAiBC,YAAjB,CAA8B,GAA9B,CAAX;AACA,eAAKC,IAAL,GAAW,KAAKL,OAAL,CAAaG,IAAb,CAAkBC,YAAlB,CAA+B,GAA/B,CAAX;AACA,eAAKE,IAAL,GAAW,KAAKL,OAAL,CAAaE,IAAb,CAAkBC,YAAlB,CAA+B,GAA/B,CAAX,CApBM,CAsBN;AACA;AACA;AACA;AAEA;AAEA;AACD;;;kCAOgB;AACf,cAAI,KAAKd,OAAT,EAAkB;AAChB,iBAAKiB,mBAAL;AACD,WAFD,MAEO;AACL,iBAAKC,iBAAL;AACD;;AACD,eAAKlB,OAAL,GAAe,CAAC,KAAKA,OAArB;AACD;;;4CAE2B;AAAA;;AAC1B,cAAImB,MAAM,GAAG,SAATA,MAAS,GAAM;AAAE,kBAAI,CAACZ,MAAL,CAAYa,OAAZ,CAAoB;AAAEC,eAAC,EAAE,MAAI,CAACN;AAAV,aAApB,EAAsC,MAAI,CAACd,IAA3C,EAAiD,MAAI,CAACC,KAAtD,EAA6DoB,KAA7D;AAAsE,WAA3F;;AACA,cAAIA,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAE,kBAAI,CAACf,MAAL,CAAYa,OAAZ,CAAoB;AAAEC,eAAC,EAAE,MAAI,CAACL;AAAV,aAApB,EAAsC,MAAI,CAACf,IAA3C,EAAiD,MAAI,CAACI,MAAtD;AAAgE,WAApF;;AACAc,gBAAM,GAHoB,CAK1B;AACA;AACA;AACD;;;8CAC6B;AAAA;;AAC5B,cAAII,MAAM,GAAG,SAATA,MAAS,GAAM;AAAE,kBAAI,CAAChB,MAAL,CAAYa,OAAZ,CAAoB;AAAEC,eAAC,EAAE,MAAI,CAACN;AAAV,aAApB,EAAsC,MAAI,CAACd,IAA3C,EAAiD,MAAI,CAACC,KAAtD,EAA6DsB,OAA7D;AAAwE,WAA7F;;AACA,cAAIA,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAE,kBAAI,CAACjB,MAAL,CAAYa,OAAZ,CAAoB;AAAEC,eAAC,EAAE,MAAI,CAACT;AAAV,aAApB,EAAqC,MAAI,CAACX,IAA1C,EAAgD,MAAI,CAACI,MAArD;AAA+D,WAArF;;AACAkB,gBAAM;AACP;;;4BAEWF,C,EAAWpB,I,EAAcwB,Q,EAAqB;AACxD;;AACA,cAAIA,QAAJ,EAAc;AACZ,iBAAKlB,MAAL,CAAYa,OAAZ,CAAoB;AAAEC,eAAC,EAAEA;AAAL,aAApB,EAA8BpB,IAA9B,EAAoCE,IAAI,CAACuB,MAAzC,EAAiDD,QAAjD;AACD,WAFD,MAEO;AACL,iBAAKlB,MAAL,CAAYa,OAAZ,CAAoB;AAAEC,eAAC,EAAEA;AAAL,aAApB,EAA8BpB,IAA9B,EAAoCE,IAAI,CAACuB,MAAzC;AACD;AACF;;;;;;;uBAnFU5B,6B;AAA6B,K;;;YAA7BA,6B;AAA6B,iD;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,0kC;AAAA;AAAA;ACH1C;;AAAQ;AAAA,mBAAS,IAAAsB,OAAA,EAAT;AAAkB,WAAlB;;AAIN;;AAAA;;AACE;;AACE;;AACA;;AAIF;;AACF;;AAEA;;AAEE;;AACE;;AACA;;AAKF;;AACF;;AAEA;;AAEE;;AACE;;AAGA;;AAKF;;AACF;;AACF;;;;AAtCE;;;;;;;;sEDEWtB,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACTxJ,kBAAQ,EAAE,4BADD;AAETC,qBAAW,EAAE,yCAFJ;AAGTC,mBAAS,EAAE,CAAC,yCAAD;AAHF,S;AAK+B,Q;;;;gBAEvC;;;gBACA;;;;;;;;;;;;;;;;;;;;AEhBH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOamL,qB;AAEX,uCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,qB;AAAqB,K;;;YAArBA,qB;AAAqB,wC;AAAA,e;AAAA,a;AAAA,6K;AAAA;AAAA;ACPlC;;AACE;;AACE;;AAAwB;;AAAK;;AAC7B;;AAAwB;;AAAK;;AAC7B;;AAAuB;;AAAI;;AAC3B;;AAAuB;;AAAI;;AAC3B;;AAAsB;;AAAG;;AACzB;;AAAyB;;AAAM;;AACjC;;AACF;;;;;;;;sEDFaA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTrL,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;AEPlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaoL,oB;AAKX,sCAAc;AAAA;;AAHL,aAAA7B,MAAA,GAAiB,EAAjB;AACA,aAAA1F,OAAA,GAAkB,EAAlB;AAEQ;;;;mCAET,CACP;;;;;;;uBARUuH,oB;AAAoB,K;;;YAApBA,oB;AAAoB,uC;AAAA;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,oE;AAAA;AAAA;ACPjC;;AAGA;;AAGA;;AAAsB;;AAAW;;;;AAL/B;;AAGA;;AAAA;;AAEK;;AAAA;;AAAe;;AAAA;;;;;;;;;sEDCTA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTtL,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKsB,Q;;;;gBAE9B;;;gBACA;;;;;;;;;;;;;;;;;;;;AEVH;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMqL,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIpI,OAAO,CAAC/D,KAAR,CAAcmM,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","// SHARED BETWEEN FRONTEND AND BACKEND\r\n\r\nexport const routes = {\r\n  api: {\r\n    _root: '/api',\r\n    font: '/font',\r\n    test: '/test-data',\r\n    other: '/other'\r\n  },\r\n  error: {\r\n    _404: '/*'\r\n  },\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { HeadUriLoaderService } from './services/head-uri-loader/head-uri-loader.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'dive-inn';\r\n  \r\n  constructor(private headUriLoader: HeadUriLoaderService) \r\n  {}\r\n\r\n  ngOnInit(): void {\r\n    this.headUriLoader.loadFontsLink();\r\n  }\r\n}\r\n","<img src='/assets/images/logoLg.png' />\r\n<img src='/assets/images/logoSm.png' />\r\n\r\n<app-font-test></app-font-test>\r\n<app-server-test></app-server-test>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<app-animated-cube></app-animated-cube>\r\n\r\n<app-animated-checkmark-svg></app-animated-checkmark-svg>\r\n\r\n<!-- <app-animated-checkmark-svg\r\n  size=\"100\"\r\n>\r\n</app-animated-checkmark-svg>\r\n\r\n<app-checkbox\r\n  id=\"testCheckbox\"\r\n  uiLabel=\"Test Checkbox\"\r\n></app-checkbox> -->\r\n\r\n<app-font-configuration></app-font-configuration>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ServerTestComponent } from './components/server-test/server-test.component';\r\nimport { FontTestComponent } from './components/font-test/font-test.component';\r\nimport { CheckboxComponent } from './components/shared/checkbox/checkbox.component';\r\nimport { AnimatedCubeComponent } from './shared/components/animated-cube/animated-cube.component';\r\nimport { AnimatedCheckmarkSvgComponent } from './shared/components/animated-checkmark-svg/animated-checkmark-svg.component';\r\nimport { CheckboxSvgComponent } from './shared/components/form-controls/checkbox-svg/checkbox-svg.component';\nimport { FontConfigurationComponent } from './components/font-configuration/font-configuration.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ServerTestComponent,\r\n    FontTestComponent,\r\n    CheckboxComponent,\r\n    AnimatedCubeComponent,\r\n    AnimatedCheckmarkSvgComponent,\r\n    CheckboxSvgComponent,\r\n    FontConfigurationComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FontManagerService } from '../../services/font-manager/font-manager.service';\r\n\r\n@Component({\r\n  selector: 'app-font-configuration',\r\n  templateUrl: './font-configuration.component.html',\r\n  styleUrls: ['./font-configuration.component.scss']\r\n})\r\nexport class FontConfigurationComponent implements OnInit {\r\n\r\n  constructor(private fontManagerService: FontManagerService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.fontManagerService.init();\r\n  }\r\n\r\n}\r\n","<h2>Font Configuration</h2>\n","import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  UiFont,\r\n  fonts,\r\n  headerFonts,\r\n  textFonts,\r\n} from '../../models/ui-font.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CheckboxComponent } from '../shared/checkbox/checkbox.component';\r\nimport { FontApiService } from '../../services/api/font/font.service';\r\nimport { GoogleFontsApiService } from '../../services/external/google/google-fonts-api.service';\r\nimport { Observable } from 'rxjs';\r\nimport { GoogleFontsApiSort, GoogleFontsApi } from '../../services/external/google/google-fonts-api.model';\r\nimport { take } from 'rxjs/operators';\r\n\r\nenum ControlsEnum {\r\n  'header',\r\n  'text',\r\n}\r\n\r\n@Component({\r\n  selector: 'app-font-test',\r\n  templateUrl: './font-test.component.html',\r\n  styleUrls: ['./font-test.component.scss'],\r\n})\r\nexport class FontTestComponent implements OnInit {\r\n\r\n  // fonts available in dropdowns\r\n  public readonly fontOptions: UiFont[] = Object.assign([], fonts);\r\n\r\n  // make enum values available in template\r\n  public readonly controlsEnum = ControlsEnum;\r\n  // ngStyles\r\n  public headerStyle: object = {};\r\n  public textStyle: object = {}; // { 'font-family': 'PT Sans' };\r\n  // ngModels\r\n  public headerFont: UiFont = headerFonts[0];\r\n  public textFont: UiFont = this.fontOptions.find(\r\n    (font) => font.uiText === 'PT Sans Bold'\r\n  );\r\n  // controls for adding new fonts\r\n  public fontNameToAdd: string;\r\n  public fontHrefToAdd: string;\r\n\r\n  public hFonts = headerFonts;\r\n  public tFonts = textFonts;\r\n\r\n  public fontList$: Observable<UiFont[]>;\r\n  public googleFontList: GoogleFontsApi[];\r\n\r\n  // public boldCheckbox : boolean;\r\n\r\n  constructor(private fontService: FontApiService, private fontsApiService: GoogleFontsApiService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.onModelChange(ControlsEnum.header);\r\n    this.onModelChange(ControlsEnum.text);\r\n\r\n    this.fontList$ = this.fontService.getFonts$();\r\n\r\n    //console.time('font-test getFonts$');\r\n    this.fontsApiService.getFonts$('popularity')\r\n      .pipe(take(1))\r\n      .subscribe(f => {\r\n        this.googleFontList = f;\r\n        // for (let i = 0; i < 1; i++) {\r\n        //   console.log(JSON.stringify(this.googleFontList[i], null, 4));\r\n        //   console.timeEnd('font-test getFonts$');\r\n        // }\r\n      });\r\n\r\n    // this.fontsApiService.getFonts$('trending')\r\n    //   .pipe(take(1))\r\n    //   .subscribe(fonts => {\r\n    //     this.googleFontList = fonts;\r\n    //     for (let i=0; i<1; i++) {\r\n    //       console.log(JSON.stringify(this.googleFontList[i], null, 4));\r\n    //     }\r\n    //   });\r\n\r\n    // this.fontsApiService.getFonts$('trending')\r\n    //   .pipe(take(1))\r\n    //   .subscribe(fonts => {\r\n    //     this.googleFontList = fonts;\r\n    //     for (let i=0; i<1; i++) {\r\n    //       console.log(JSON.stringify(this.googleFontList[i], null, 4));\r\n    //     }\r\n    //   });\r\n    // this.fontsApiService.getFonts$('popularity')\r\n    //   .pipe(take(1))\r\n    //   .subscribe(fonts => {\r\n    //     this.googleFontList = fonts;\r\n    //     for (let i=0; i<1; i++) {\r\n    //       console.log(JSON.stringify(this.googleFontList[i], null, 4));\r\n    //     }\r\n    //   });\r\n  }\r\n\r\n  /**\r\n   * Callback for Angular event when dropdown selection is changed and model has updated\r\n   * Set the associated ngStyle object when dropdown changes\r\n   * @param controlId Enum value to distinguish initiating control\r\n   * @param $newVal New font selected\r\n   */\r\n  public onModelChange(controlId: ControlsEnum, $newVal?: UiFont) {\r\n    if ($newVal) {\r\n      switch (controlId) {\r\n        case ControlsEnum.header:\r\n          //this.headerStyle = { 'font-family': this.headerFont.family };\r\n          this.headerStyle = this.buildStyleObject(\r\n            this.headerStyle,\r\n            $newVal.family\r\n          );\r\n          break;\r\n        case ControlsEnum.text:\r\n          //this.textStyle = { 'font-family': this.textFont.family };\r\n          this.textStyle = this.buildStyleObject(\r\n            this.textStyle,\r\n            $newVal.family\r\n          );\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Standard dropdown change event, fires after ngModelChange\r\n   * @param $event DOM event\r\n   */\r\n  // public onChange($event: Event) {\r\n  //   console.log('font-test - customCheckboxChanged DOM event: ' + $event);\r\n  // }\r\n\r\n  // public customCheckboxChanged(newVal: boolean) {\r\n  //   console.log('customCheckboxChanged: ' + newVal);\r\n  //   this.textFont.properties.bold = newVal;\r\n  // [(ngModel)]=\"textFont.properties.bold\"\r\n  // (ngModelChange)=\"$event ? textFont.properties.weight = 700 : textFont.properties.weight = 400\"\r\n  // [checked]=\"textFont.properties.weight === 700\"\r\n  //}\r\n\r\n  private _checkedValue: boolean = false;\r\n\r\n  get checkedValue() {\r\n    return this._checkedValue;\r\n  }\r\n\r\n  set checkedValue(newVal) {\r\n    setTimeout(() => {\r\n      this._checkedValue = newVal;\r\n      newVal\r\n        ? (this.textFont.properties.weight = 700)\r\n        : (this.textFont.properties.weight = 400);\r\n      this.textFont.properties.bold = newVal;\r\n\r\n      this.textStyle = this.buildStyleObject(\r\n        this.textStyle,\r\n        undefined,\r\n        this.textFont.properties.weight\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a style object to pass into ngStyle binding\r\n   * @TODO refactor to pass in any number and type of properties for styles\r\n   */\r\n  private buildStyleObject(\r\n    styleObject: object,\r\n    fontFamily?: string,\r\n    fontWeight?: number\r\n  ): object {\r\n    const newStyle = {\r\n      'font-family': fontFamily ? fontFamily : styleObject['font-family'],\r\n      'font-weight': fontWeight ? fontWeight : styleObject['font-weight'],\r\n    };\r\n    return newStyle;\r\n  }\r\n\r\n}\r\n","<!-- <h1 [ngStyle]=\"{'font-family': 'PT Sans'}\">Dive Inn - What's Inside ? ! @ # $ % * ( ) ~ - + = ' \" ;</h1> -->\r\n\r\n<h1 [ngStyle]=\"headerStyle\">Dive Inn - What's Inside</h1>\r\n<h1 [ngStyle]=\"headerStyle\">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</h1>\r\n<h1 [ngStyle]=\"headerStyle\">a b c d e f g h i j k l m n o p q r s t u v w x y z</h1>\r\n<h1 [ngStyle]=\"headerStyle\">ABCDEFGHIJKLMNOPQRSTUVWXYZ</h1>\r\n<h1 [ngStyle]=\"headerStyle\">abcdefghijklmnopqrstuvwxyz</h1>\r\n<h1 [ngStyle]=\"headerStyle\">. ? ! / @ # $ % ^ &amp; * ( ) ~ - + = ' \" : ; &lt; &gt;</h1>\r\n<hr>\r\n<p [ngStyle]=\"textStyle\">The quick brown fox jumped over the lazy dog.</p>\r\n<p [ngStyle]=\"textStyle\">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p>\r\n<p [ngStyle]=\"textStyle\">a b c d e f g h i j k l m n o p q r s t u v w x y z</p>\r\n<p [ngStyle]=\"textStyle\">ABCDEFGHIJKLMNOPQRSTUVWXYZ</p>\r\n<p [ngStyle]=\"textStyle\">abcdefghijklmnopqrstuvwxyz</p>\r\n<p [ngStyle]=\"textStyle\">. ? ! / @ # $ % ^ &amp; * ( ) ~ - + = ' \" : ; &lt; &gt;</p>\r\n<hr>\r\n<div class=\"controlsContainer\">\r\n  <div>\r\n    <select\r\n      [ngModel]=\"headerFont\"\r\n      (ngModelChange)=\"onModelChange(controlsEnum.header, $event)\"\r\n    >\r\n      <optgroup label=\"Header Fonts\">\r\n        <option *ngFor=\"let font of fontList$ | async\"\r\n          [ngValue]=\"font\"\r\n        >\r\n          {{ font.uiText }}\r\n        </option>\r\n      </optgroup>\r\n      <optgroup label=\"Text Fonts\">\r\n        <option *ngFor=\"let font of tFonts\"\r\n          [ngValue]=\"font\"\r\n        >\r\n          {{ font.uiText }}\r\n        </option>\r\n      </optgroup>\r\n    </select>\r\n    <br/>\r\n    <label for=\"headerBold\">Bold: </label>\r\n    <input type=\"checkbox\"\r\n      id=\"headerBold\"\r\n      [(ngModel)]=\"headerFont.properties.bold\"\r\n      (ngModelChange)=\"$event ? headerFont.properties.weight = 700 : headerFont.properties.weight = 400\"\r\n      [checked]=\"headerFont.properties.weight === 700\"\r\n    />\r\n    <p>Selected Font:<br>{{headerFont.uiText}}</p>\r\n    <p>bold: {{headerFont.properties.bold}}<br>weight: {{headerFont.properties.weight}}</p>\r\n  </div>\r\n\r\n  <div>\r\n    <select\r\n      [ngModel]=\"textFont\"\r\n      (ngModelChange)=\"onModelChange(controlsEnum.text, $event)\"\r\n    >\r\n      <option *ngFor=\"let font of fontOptions\"\r\n        [ngValue]=\"font\"\r\n      >\r\n        {{ font.uiText }}\r\n      </option>\r\n    </select>\r\n    <br/>\r\n    <p>Selected Font:<br>{{textFont.uiText}}</p>\r\n    <p>bold: {{textFont.properties.bold}}\r\n    <br>weight: {{textFont.properties.weight}}</p>\r\n  </div>\r\n\r\n\r\n  <div>\r\n    <checkbox\r\n      uiLabel='Bold'\r\n      [(checkedValue)]='checkedValue'\r\n    ></checkbox>\r\n    <p>Bold value: {{textFont.properties.bold}}</p>\r\n    <p>Weight value: {{textFont.properties.weight}}</p>\r\n  </div>\r\n\r\n    <!-- <checkbox [(ngModel)]=\"boldCheckbox\"></checkbox> -->\r\n    <!-- <input type=\"checkbox\"\r\n      id=\"textBold\"\r\n      [(ngModel)]=\"textFont.properties.bold\"\r\n      (ngModelChange)=\"$event ? textFont.properties.weight = 700 : textFont.properties.weight = 400\"\r\n      [checked]=\"textFont.properties.weight === 700\" -->\r\n    <!-- /> -->\r\n    <!-- <label for=\"textBold\"><span>Bold AT|jpgy</span></label>\r\n    <p>Selected Font:<br>{{textFont.uiText}}</p>\r\n    <p>bold: {{textFont.properties.bold}}<br>weight: {{textFont.properties.weight}}</p>\r\n  </div> -->\r\n\r\n\r\n  <div>\r\n    <h4>Add a new font</h4>\r\n    <label for=\"addFontFamily\">Family: </label>\r\n    <input type=\"text\"\r\n      id=\"addFontFamily\"\r\n      name='bogusName'\r\n      [(ngModel)]=\"fontNameToAdd\"\r\n      #addFontFamily=\"ngModel\"\r\n      required\r\n    />\r\n    <p>Input: {{ fontNameToAdd }}</p>\r\n    <p>Valid: {{ addFontFamily.valid }}</p>\r\n    <label for=\"addFontHref\">Href: </label>\r\n    <input type=\"text\"\r\n      id=\"addFontHref\"\r\n      [(ngModel)]=\"fontHrefToAdd\"\r\n      #addFontHref=\"ngModel\"\r\n    />\r\n    <p>Input: {{ fontNameToAdd }}</p>\r\n    <p>Valid: {{ addFontHref.valid }}</p>\r\n  </div>\r\n</div>\r\n\r\n\r\n<div class=\"controlsContainer\">\r\n  <div>\r\n    <input type=\"radio\"\r\n      name=\"testRadio\"\r\n      id=\"testRadio1\"\r\n    />\r\n    <label for=\"testRadio1\"><span>Test Radio jpgy</span></label>\r\n    <br><br>\r\n    <input type=\"radio\"\r\n      name=\"testRadio\"\r\n      id=\"testRadio2\"\r\n    />\r\n    <label for=\"testRadio2\"><span>jpgy Test Radio</span></label>\r\n  </div>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\nimport { ServerTestService } from '../../services/server-test/server-test.service';\r\nimport { ServerTestData } from '../../services/server-test/server-test.model';\r\nimport { Subscription, Subject, Observable } from 'rxjs';\r\nimport { takeUntil, take } from 'rxjs/operators';\r\n\r\nlet a = { prop: \"a\" };\r\n\r\n@Component({\r\n  selector: 'app-server-test',\r\n  templateUrl: './server-test.component.html',\r\n  styleUrls: ['./server-test.component.scss']\r\n})\r\nexport class ServerTestComponent implements OnInit, OnDestroy {\r\n\r\n  public serverResponse$: Observable<ServerTestData>;\r\n\r\n  constructor(public serverTestService: ServerTestService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //this.serverResponse$ = this.serverTestService.getServerTestData$();\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  getAnswer() {\r\n    console.log('**** component getAnswer()');\r\n    this.serverResponse$ = this.serverTestService.getServerTestData$();\r\n    //this.serverTestService.getServerTestData$();\r\n  }\r\n}\r\n","<br/>\r\n<hr/>\r\n<h1>Server Test</h1>\r\n\r\n<button (click)=\"getAnswer()\">server test</button>\r\n\r\n<p *ngFor=\"let item of serverResponse$ | async\"\r\n  class=\"bordered\"\r\n>\r\n  Return var: {{ item?.test_id }}\r\n</p>\r\n","import { Component, OnInit, Renderer2, ElementRef, forwardRef, Input, EventEmitter, Output, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\r\nimport { UiFont } from '../../../models/ui-font.model';\r\n\r\n@Component({\r\n  selector: 'checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CheckboxComponent implements OnInit {\r\n\r\n  @Input() uiLabel: string = '';\r\n\r\n  @Output() checkedValueChange = new EventEmitter<boolean>();\r\n  @Input() get checkedValue() {\r\n    console.log('checkbox getter: ' + this._checkedValue);\r\n    return this._checkedValue;\r\n  }\r\n  set checkedValue(newVal) {\r\n    console.log('checkbox setter: ' + this._checkedValue + ' -> ' + newVal);\r\n    this._checkedValue = newVal;\r\n\r\n    // emit our checkValueChanged event to outside listeners\r\n    this.checkedValueChange.emit(this._checkedValue);\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  static idCounter: number = 0;\r\n  controlID: string;\r\n  checked: boolean;\r\n  private _checkedValue: boolean = false;\r\n\r\n  constructor(private renderer: Renderer2, private elementRef: ElementRef, private cdr: ChangeDetectorRef) {\r\n\r\n    this.controlID = \"myCheckbox\" + CheckboxComponent.idCounter++;\r\n    console.log('constructor: ' + this._checkedValue);\r\n  }\r\n\r\n  // Inputs are available now\r\n  ngOnInit(): void {\r\n    console.log('onInit: ' + this._checkedValue);\r\n  }\r\n\r\n  onChange($event: Event) {\r\n    console.log('checkbox change event: ' + $event);\r\n    //this.checked = event.target.checked;\r\n  }\r\n  onNgModelChange($newValue) {\r\n    console.log('checkbox model changed to new value: ' + $newValue);\r\n  }\r\n\r\n}\r\n","<input type=\"checkbox\"\r\n  id=\"textBold\"\r\n  [(ngModel)]=\"checkedValue\"\r\n  [checked]=\"checkedValue\"\r\n\r\n  (change)=\"onChange($event)\"\r\n  (ngModelChange)=\"onNgModelChange($event)\"\r\n/>\r\n<label for=\"textBold\">\r\n  <span>{{uiLabel}}</span>\r\n</label>\r\n<!-- <p>checkedValue:<br>{{checkedValue}}</p> -->\r\n","\r\ninterface FontProperties {\r\n  sizeRem?: number;\r\n  weight?: number;\r\n  bold?: boolean;\r\n  letterSpacingPx?: number;\r\n}\r\n\r\nexport interface IUiFont {\r\n  uiText?: string;\r\n  family: string;\r\n  hrefId?: string;\r\n  properties?: FontProperties;\r\n}\r\n\r\nexport class UiFont implements IUiFont {\r\n  readonly uiText: string;\r\n  readonly family: string;\r\n  readonly hrefId: string;\r\n  readonly properties: FontProperties;\r\n  constructor(font: IUiFont) {\r\n    if (!font.family) {\r\n      throw new Error('font.family must exist and not be an empty string in constructor argument for UiFont');\r\n    }\r\n    this.family = font.family;\r\n    this.uiText = font.uiText ? font.uiText : font.family;\r\n    this.hrefId = font.hrefId ? font.hrefId : font.family.split(' ').join('+');\r\n    this.properties = font.properties ? Object.assign({}, font.properties) : {};\r\n  }\r\n}\r\n\r\n/**\r\n * Include fonts here, will be downloaded via <link> element and added as an option in font dropdowns\r\n */\r\nconst uiFonts: IUiFont[] = [\r\n  { family: 'Alfa Slab One' },\r\n  { family: 'Anton' },\r\n  { family: 'Bevan' },\r\n  { family: 'Patua One' },\r\n  { family: 'Piedra' },\r\n  { family: 'PT Sans', hrefId: 'PT+Sans' },\r\n  { family: 'PT Sans', hrefId: 'PT+Sans:wght@700', uiText: 'PT Sans Bold', properties: {  weight: 700 } }\r\n];\r\n\r\nfunction generateFonts(fonts: IUiFont[]): UiFont[] {\r\n  return fonts.map(font => new UiFont(font));\r\n}\r\n\r\nexport const fonts: UiFont[] = generateFonts(uiFonts);\r\n\r\nconst _headerFonts: IUiFont[] = [\r\n  { family: 'Alfa Slab One' },\r\n  { family: 'Anton' },\r\n  { family: 'Bevan' },\r\n  { family: 'Patua One' },\r\n  { family: 'Piedra' },\r\n];\r\nconst _textFonts: IUiFont[] = [\r\n  { family: 'PT Sans', hrefId: 'PT+Sans' },\r\n  { family: 'PT Sans', hrefId: 'PT+Sans:wght@700', uiText: 'PT Sans Bold', properties: {  weight: 700 } }\r\n];\r\nexport const headerFonts = generateFonts(_headerFonts);\r\nexport const textFonts = generateFonts(_textFonts);\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n// shared from backend\r\nimport { routes } from '../../../../../server/app/routes';\r\n\r\nimport { UiFont, IUiFont } from '../../../models/ui-font.model';\r\nimport { Font } from './font.model';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FontApiService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getFonts$(): Observable<UiFont[]> {\r\n\r\n    console.log('**** API service getFonts()');\r\n    const results: Observable<Font[]> = this.http.get<Font[]>(routes.api._root + routes.api.font);\r\n\r\n    const uifontArray: Observable<UiFont[]>\r\n      = results.pipe(\r\n        map((fontArray: Font[]) => {\r\n          return fontArray.map( (font: Font) => {\r\n            const uifont: IUiFont = {\r\n              family: font.font_family,\r\n              uiText: font.ui_text,\r\n              hrefId: font.href_id,\r\n              // properties: font.properties, @TODO need to add properties to table and BE/FE API models\r\n            }\r\n            return new UiFont(uifont);\r\n          });\r\n        })\r\n    );\r\n    return uifontArray;\r\n  }\r\n\r\n  public getFontFamilyFavorites(): Observable<string[]> {\r\n    return this.http.get<string[]>(routes.api._root + routes.api.font + '?fontdata=family');\r\n\r\n  }\r\n\r\n  // public getFontFamilyBlacklist(): Observable<string[]> {\r\n\r\n  // }\r\n\r\n  public addFont(font: UiFont) {\r\n    // TODO\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, Subject, ReplaySubject } from 'rxjs';\r\n\r\nimport { GoogleFontsApi, GoogleFontsApiSort, GoogleFontsApiResponse} from './google-fonts-api.model';\r\nimport { shareReplay, pluck } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GoogleFontsApiService {\r\n\r\n  private readonly BASE_URL: string = 'https://www.googleapis.com/webfonts/v1/webfonts';\r\n  private readonly API_KEY: string = '?key=AIzaSyCqZ3dPYustmQUajzIhYu7MJeJ_ePHPnyk';\r\n  private readonly SORT_PARAM: string = '&sort=';\r\n  private readonly URL = this.BASE_URL + this.API_KEY + this.SORT_PARAM;\r\n  private readonly CACHE_SIZE: 1;\r\n\r\n  /**\r\n   * map of sharedReplay Observables to store caches of different sort methods\r\n   */\r\n  private cacheMap = new Map <GoogleFontsApiSort, Observable<GoogleFontsApi[]>>();\r\n\r\n  /**\r\n   * @param http HttpClient for API requests\r\n   */\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Gets an array of fonts from the Google Fonts API, optionally sorted\r\n   * @param sort [='popularity'] sort type option\r\n   * @param clearCache [=false] boolean to force API request\r\n   * @returns Observable of fonts array\r\n   */\r\n  public getFonts$(sort: GoogleFontsApiSort = 'popularity', clearCache: boolean = false): Observable<GoogleFontsApi[]> {\r\n    //console.time('getFonts$');\r\n\r\n    const url = this.URL + sort;\r\n    return this.getGoogleFontsData$(sort, url, clearCache);\r\n  }\r\n\r\n  /**\r\n   * Returns font data for the provided sort key, populating if necessary with a GET request to the provided URL\r\n   * @param sortKey Key for cache map\r\n   * @param url URL for API request\r\n   * @param clearCache [=false] boolean to force API request for new data\r\n   * @returns Observable of Google Fonts array\r\n   */\r\n  private getGoogleFontsData$(sortKey: GoogleFontsApiSort, url: string, clearCache: boolean = false): Observable<GoogleFontsApi[]> {\r\n    let cache$ = this.cacheMap.get(sortKey);\r\n    if (!cache$ || clearCache) {\r\n      //console.log('!!!!! GoogleFontsApiService.getGoogleFontsData$ making HTTP request !!!!!');\r\n      //console.time('Google Fonts Request');\r\n      cache$ = this.http\r\n        .get<GoogleFontsApiResponse>(url)\r\n        .pipe(\r\n          pluck('items'),\r\n          // enable 'multicast' style of notification for better performance (if we had multiple subscribers),\r\n          // and provide last value to each new subscriber\r\n          shareReplay(this.CACHE_SIZE),\r\n        );\r\n      this.cacheMap.set(sortKey, cache$);\r\n      //console.timeEnd('Google Fonts Request');\r\n    }\r\n    return cache$;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GoogleFontsApiService } from '../external/google/google-fonts-api.service';\r\nimport { GoogleFontsApi } from '../external/google/google-fonts-api.model';\r\nimport { FontApiService } from '../api/font/font.service';\r\nimport { HeadUriLoaderService } from '../head-uri-loader/head-uri-loader.service';\r\nimport { take } from 'rxjs/operators';\r\nimport { LoggerService } from '../logger/logger.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FontManagerService {\r\n\r\n  private googleFontCategories: Set<string> = new Set();\r\n\r\n  private blacklistedCategories: string[];\r\n\r\n  private allFonts: GoogleFontsApi[] = [];\r\n\r\n  private validCategoryFonts;\r\n  private blacklistedFonts;\r\n  private availableFonts;\r\n  private selectedFonts;\r\n  private fontsToDownload;\r\n\r\n  private timeStart;\r\n  private timeStop;\r\n\r\n  constructor(\r\n    private googleFontsApiService: GoogleFontsApiService,\r\n    private fontsApiService: FontApiService,\r\n    private headUriService: HeadUriLoaderService,\r\n    private logger: LoggerService\r\n  ) {\r\n    // this.logger.enableLogger(true);\r\n  }\r\n\r\n  public init() {\r\n\r\n    // this.logger.log('Test');\r\n    // this.logger.log('', undefined, { label: 'Get Font Categories', action: 'start' });\r\n    // this.logger.log('', { 'Categories Size': this.googleFontCategories.size, 'another var': 100 });\r\n\r\n    this.getAllGoogleFonts();\r\n  }\r\n\r\n  private getAllGoogleFonts() {\r\n    if (!this.allFonts || !this.allFonts.length) {\r\n      this.googleFontsApiService.getFonts$('popularity')\r\n        .pipe(take(1))\r\n        .subscribe(fonts => {\r\n          this.allFonts = fonts;\r\n          // debugger;\r\n          // this.logger.log('', undefined, { label: 'getFonts$', action: 'stop' });\r\n          this.parseFontsForCategories();\r\n        });\r\n    }\r\n  }\r\n\r\n  private parseFontsForCategories() {\r\n    // add category of each font to Set to retrieve unique category values\r\n    this.allFonts.forEach(font => {\r\n      this.googleFontCategories.add(font.category)\r\n    });\r\n\r\n    // this.logger.log('', [{ 'Categories Size': this.googleFontCategories.size, Categories: this.googleFontCategories }]);\r\n    // this.logger.log('', null, { label: 'Get Font Categories', action: 'stop' });\r\n  }\r\n\r\n  private getSelectableFonts() {\r\n\r\n  }\r\n\r\n  private getBlacklistedFonts() {\r\n\r\n  }\r\n}\r\n","import { Injectable, Renderer2, Inject, RendererFactory2 } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nimport { fonts } from '../../models/ui-font.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HeadUriLoaderService {\r\n\r\n  private readonly fontBaseUrl = 'https://fonts.googleapis.com/css2?family=';\r\n  private readonly fontNameSeparator = '&family=';\r\n  private readonly fontBaseUrlParam = '&display=swap';\r\n\r\n  private fontLinkUrl: string;\r\n  private renderer: Renderer2;\r\n\r\n  constructor(\r\n    rendererFactory: RendererFactory2,\r\n    @Inject(DOCUMENT) private document: Document\r\n  ) {\r\n    // Renderer2 can't be injected (usually used in a Component), so create using factory\r\n    this.renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  public loadFontsLink() {\r\n    // construct the href string for the link element that will be appended to <head>\r\n    this.fontLinkUrl = this.fontBaseUrl;\r\n    this.fontLinkUrl += fonts.map(font => font.hrefId).join(this.fontNameSeparator);\r\n    this.fontLinkUrl += this.fontBaseUrlParam;\r\n    console.log('** fontLinkUrl: ' + this.fontLinkUrl);\r\n\r\n    // construct the link element to append\r\n    const fontLink: HTMLLinkElement = this.renderer.createElement('link');\r\n    fontLink.type = 'text/css';\r\n    fontLink.rel = 'stylesheet';\r\n    fontLink.href = this.fontLinkUrl;\r\n    fontLink.onload = this.onloadCallback.bind(this, ['fontLink']);\r\n    fontLink.onerror = this.onloadCallback.bind(this, ['fontLink Error']);\r\n\r\n    // append <link> to <head>\r\n    this.attachToHead(fontLink);\r\n  }\r\n\r\n  private attachToHead(element: HTMLLinkElement | HTMLScriptElement) {\r\n    const head: HTMLHeadElement = this.document.head || this.document.getElementsByTagName('head')[0];\r\n    head.appendChild(element);\r\n  }\r\n\r\n  public onloadCallback(args: string[]) {\r\n    console.log('** onloadCallback: ' + args[0]);\r\n  }\r\n}\r\n","// tslint:disable: no-console\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport type TimerActionType = 'start' | 'stop';\r\nexport interface LogTimer {\r\n  label: string;\r\n  action: TimerActionType;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggerService {\r\n\r\n  // private callers: Map<string, boolean> = new Map<string, boolean>();\r\n  // private currentCaller: string = '';\r\n\r\n  // constructor() { }\r\n\r\n  // public enableLogger(watch: boolean = false) {\r\n  //   const stack = new Error().stack;\r\n  //   const caller = this.getCallingFile(stack);\r\n  //   this.callers.set(caller, watch);\r\n  // }\r\n\r\n  // public log(text: string, props: { [key: string]: any } = {}, timer?: LogTimer) {\r\n  //   const stack = new Error().stack;\r\n  //   const caller = this.getCallingFile(stack);\r\n  //   const logEnabled = this.callers.get(caller);\r\n  //   debugger;\r\n  //   if (logEnabled) {\r\n  //     if (caller !== this.currentCaller) {\r\n  //       console.groupEnd();\r\n  //       console.group(caller);\r\n  //       this.currentCaller = caller;\r\n  //     }\r\n  //     if (timer?.action === 'start') {\r\n  //       debugger;\r\n  //       console.log('Start timer: ' + timer.label);\r\n  //       console.time(timer.label);\r\n  //     } else if (timer?.action === 'stop') {\r\n  //       debugger;\r\n  //       console.timeEnd(timer.label);\r\n  //     }\r\n\r\n  //     if (text) {\r\n  //       console.log(text + '\\n');\r\n  //     }\r\n\r\n  //     Object.keys(props).forEach(key => {\r\n  //     //props.forEach(prop => {\r\n  //       console.log(key + ' = ' + props[key]);\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  // private getCallingFile(stack: string): string {\r\n  //   let done = false;\r\n  //   let file: string;\r\n  //   let i = 1;\r\n  //   //debugger;\r\n  //   do {\r\n  //     const line = stack?.split('\\n')[i].trim();\r\n  //     let parts = line.split('at ');\r\n  //     parts = parts[1].split(' ');\r\n  //     if (!(parts[0].includes('LoggerService'))) {\r\n  //       done = true;\r\n  //       file = parts[0].includes('new') ? parts[1] : parts[0].split('.')[0];\r\n  //     }\r\n  //     i++;\r\n  //   } while (!done);\r\n  //   //debugger;\r\n  //   return file;\r\n  // }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ServerTestData } from './server-test.model';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n// shared from backend\r\nimport { routes } from '../../../../server/app/routes';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServerTestService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getServerTestData$(): Observable<ServerTestData> {\r\n\r\n    console.log('**** service getServerTestData()');\r\n    return this.http.get<ServerTestData>(routes.api._root + routes.api.test);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n// load snapsvg with types\r\nimport 'snapsvg-cjs';\r\nimport * as SNAPSVG_TYPE from 'snapsvg';\r\ndeclare var Snap: typeof SNAPSVG_TYPE;\r\n//declare var mina: any; // snapsvg animation\r\n\r\n@Component({\r\n  selector: 'app-animated-checkmark-svg',\r\n  templateUrl: './animated-checkmark-svg.component.html',\r\n  styleUrls: ['./animated-checkmark-svg.component.scss']\r\n})\r\nexport class AnimatedCheckmarkSvgComponent implements OnInit {\r\n\r\n  @Input() htmlId: string = '';\r\n  @Input() size: number;\r\n\r\n  private pathUn: SNAPSVG_TYPE.Element;\r\n  private pathMid: SNAPSVG_TYPE.Element;\r\n  private pathChk: SNAPSVG_TYPE.Element;\r\n\r\n  private dUn: string;\r\n  private dMid: string;\r\n  private dChk: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    // const s = Snap('#snapSvg');\r\n    // const c = s.circle(50, 50, 50);\r\n    // c.animate({r:10}, 2000);    \r\n    // c.attr({\r\n    //   fill: 'red',\r\n    //   stroke: 'yellow',\r\n    //   strokeWidth: 5\r\n    // });\r\n\r\n    // this.pathUn = Snap.select('#CheckedPath_un');\r\n    // this.pathMid = Snap.select('#CheckedPath_mid');\r\n    // this.pathChk = Snap.select('#CheckedPath_chk');\r\n    //debugger;\r\n    this.pathUn = Snap.select('.animated-checkmark-unchecked');\r\n    this.pathMid = Snap.select('.animated-checkmark-midchecked');\r\n    this.pathChk = Snap.select('.animated-checkmark-checked');\r\n\r\n    this.dUn = this.pathUn.node.getAttribute('d');\r\n    this.dMid =this.pathMid.node.getAttribute('d');\r\n    this.dChk =this.pathChk.node.getAttribute('d');\r\n\r\n    // var toUnchk = () => { this.pathUn.animate({ d: this.dUn }, 200, mina.easein, toMid1); }\r\n    // var toMid1 = () => { this.pathUn.animate({ d: this.dMid }, 200, mina.easeout, toChk); }\r\n    // var toChk = () => { this.pathUn.animate({ d: this.dChk }, 200, mina.easein, toMid2); }\r\n    // var toMid2 = () => { this.pathUn.animate({ d: this.dMid }, 200, mina.easeout, toUnchk); }\r\n\r\n    // var transitionChecked = this.animate.bind(this, )\r\n\r\n    //toMid1();\r\n  }\r\n\r\n  public checked: boolean = false;\r\n  private time: number = 80;\r\n  private midTr = mina.easein;\r\n  private lastTr = mina.easeout;\r\n\r\n  public animate() {\r\n    if (this.checked) {\r\n      this.transitionUnchecked()\r\n    } else {\r\n      this.transitionChecked();\r\n    }     \r\n    this.checked = !this.checked;\r\n  }\r\n\r\n  private transitionChecked() {\r\n    var toMid1 = () => { this.pathUn.animate({ d: this.dMid }, this.time, this.midTr, toChk); }\r\n    var toChk = () => { this.pathUn.animate({ d: this.dChk }, this.time, this.lastTr); }\r\n    toMid1();\r\n\r\n    // let f = this.ani.bind(this, [this.dChk, this.time]);\r\n    // debugger;\r\n    // this.ani(this.dMid, this.time, f);\r\n  }\r\n  private transitionUnchecked() {\r\n    var toMid2 = () => { this.pathUn.animate({ d: this.dMid }, this.time, this.midTr, toUnchk); }\r\n    var toUnchk = () => { this.pathUn.animate({ d: this.dUn }, this.time, this.lastTr); }\r\n    toMid2();\r\n  }\r\n\r\n  private ani(d: string, time: number, callback?: () => {}) {\r\n    debugger;\r\n    if (callback) {\r\n      this.pathUn.animate({ d: d }, time, mina.linear, callback);\r\n    } else {\r\n      this.pathUn.animate({ d: d }, time, mina.linear);\r\n    }\r\n  }\r\n}\r\n","<!-- <div class=\"svg-div\" #svgArea>\r\n  <svg id=\"snapSvg\"></svg>\r\n</div> -->\r\n\r\n<!-- <div class=\"svg-div\">\r\n  <svg>\r\n    <image xlink:href=\"/assets/images/Check_Chk.svg\" width=\"300\"/>\r\n  </svg>\r\n</div> -->\r\n\r\n<button (click)=\"animate()\"\r\n  [id]=\"htmlId\"\r\n  class=\"svg-container\"\r\n>\r\n  <svg width=\"1e3\" height=\"1e3\" version=\"1.1\" viewBox=\"0 0 264.6 264.6\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g>\r\n      <path d=\"m264.6 264.6h-264.6v-264.6h264.6v264.6z\" fill=\"#de2726\" />\r\n      <path id=\"CheckedPath_un\" \r\n        class=\"animated-checkmark-unchecked\"\r\n        d=\"m2.375e-6 264.6h264.6v-264.6h-264.6v168.2z\"\r\n        fill=\"#ebebeb\" />\r\n    </g>\r\n  </svg>\r\n\r\n  <svg class=\"hidden\" width=\"1e3\" height=\"1e3\" version=\"1.1\" viewBox=\"0 0 264.6 264.6\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g>\r\n      <path d=\"m264.6 264.6h-264.6v-264.6h264.6v264.6z\" display=\"inline\" fill=\"#de2726\" />\r\n      <path id=\"CheckedPath_mid\"\r\n        class=\"animated-checkmark-midchecked\"\r\n        d=\"m101.5 186.9 60.63-0.4676 0.9351-108.8-18.55 0.1559-0.9352 90.09-42.08 0.3117z\"\r\n        display=\"inline\" \r\n        fill=\"#ebebeb\" />\r\n    </g>\r\n  </svg>\r\n\r\n  <svg class=\"hidden\" width=\"1e3\" height=\"1e3\" version=\"1.1\" viewBox=\"0 0 264.6 264.6\"\r\n    xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g transform=\"translate(0 0)\">\r\n      <path d=\"m264.6 264.58h-264.6v-297.02h264.6v232.18z\" \r\n        display=\"inline\" \r\n        fill=\"#de2726\" />\r\n      <path id=\"CheckedPath_chk\" \r\n        class=\"animated-checkmark-checked\"\r\n        d=\"m11.5 136.48 86.4 85.08 155.2-152.5-26.45-26.01-128.7 126.1-59.95-59.07z\"\r\n        display=\"inline\" \r\n        fill=\"#ebebeb\" />\r\n    </g>\r\n  </svg>\r\n</button>\r\n<!-- <button (click)=\"animate()\">Animate</button>\r\n<label> Checked: {{checked}}</label> -->","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-animated-cube',\r\n  templateUrl: './animated-cube.component.html',\r\n  styleUrls: ['./animated-cube.component.scss']\r\n})\r\nexport class AnimatedCubeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"scene-3d\">\r\n  <div class=\"cube\">\r\n    <div class=\"face front\">front</div>\r\n    <div class=\"face right\">right</div>\r\n    <div class=\"face left\">left</div>\r\n    <div class=\"face back\">back</div>\r\n    <div class=\"face top\">top</div>\r\n    <div class=\"face bottom\">bottom</div>\r\n  </div>\r\n</div>","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-svg',\r\n  templateUrl: './checkbox-svg.component.html',\r\n  styleUrls: ['./checkbox-svg.component.scss']\r\n})\r\nexport class CheckboxSvgComponent implements OnInit {\r\n\r\n  @Input() htmlId: string = '';\r\n  @Input() uiLabel: string = '';\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-animated-checkmark-svg\r\n  [id]=\"htmlId + '_checkmark'\"\r\n></app-animated-checkmark-svg>\r\n<input type=\"checkbox\"\r\n  [id]=\"htmlId\"\r\n/>\r\n<label [for]=\"htmlId\">{{uiLabel}}</label>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}